The following is a Prolog program that can be used to generate and test all legal evolutions of a game represented in the situation calculus:

% All legal evolutions of a game: can be used both as a generator and test.
game(F,F):- final(F).
game(S,F):- \+ final(S), legal(M,S), game(do(M,S),F).

The domain independent version of the situation calculus is as follows:

% Situation Calculus - our formulation for games.
holds(F, S):- initially(F, S).
holds(F, do(M, S)):- effect(F, M, S).
holds(F, do(A, S)):- holds(F, S), \+ abnormal(F, A, S).

{game_example}

The verbal description of another game is as follows:

{game_description}

Produce set of domain specific axioms for the game. Use numeric payoffs. Mark the beginning and end of the Prolog code with a '@'. Include what holds initially: who is a player, their role, whether they can play, and the default move. Include what are possible and opposite moves. The names of the moves should be enclosed within single quotation marks. Write code compatible with SWI Prolog. If the clauses of a specified predicate are not together in the source file, use the discontiguous declaration of SWI:

:- discontiguous p/3.

 at the beginning of the file.
