{
    "name": "Metewa",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n:- discontiguous payoff/4, initial/1, initially/2, final/1, legal/2, possible/2, opposite_move/2, effect/3, abnormal/3, finally/2.\n\n/* Game specific predicates for the \"Watch Game or Match\" scenario */\n\n% Payoff matrix for deciding between basketball and soccer\npayoff('basketball', 'basketball', 2, 1).\npayoff('soccer', 'soccer', 1, 2).\npayoff('basketball', 'soccer', 0, 0).\npayoff('soccer', 'basketball', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role\ninitially(player(friend1), s0).\ninitially(player(friend2), s0).\ninitially(role(friend1, basketballFan), s0).\ninitially(role(friend2, soccerFan), s0).\ninitially(control(friend1), s0).\ninitially(control(friend2), s0).\ninitially(default_move(_, 'basketball'), s0).\n\n% When a state is final: specified by a move from each player\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'basketball'), S) :- holds(player(P), S).\npossible(move(P, 'soccer'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('basketball', 'soccer').\nopposite_move('soccer', 'basketball').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S) :-\n    final(S),\n    holds(role(P1, basketballFan), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, soccerFan), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S) :-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S) :-\n    finally(outcome(_, _, _, P2, _, U2), S).\n",
    "game_moves": [
        "basketball",
        "soccer"
    ],
    "game_players": [
        "friend1",
        "friend2"
    ],
    "default_move": "basketball",
    "moves": [
        "basketball",
        "basketball",
        "soccer",
        "soccer"
    ],
    "payoffs": [
        2.0,
        0.0,
        1.0,
        0.0
    ],
    "total_payoff": 3.0,
    "trace_messages": [],
    "attempts": 1
}