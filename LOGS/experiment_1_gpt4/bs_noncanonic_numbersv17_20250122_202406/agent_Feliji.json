{
    "name": "Feliji",
    "strategy_name": "unnamed_strategy",
    "strategy_rules": null,
    "status": "syntactic_error",
    "game_rules": "\n```prolog\n:- discontiguous payoff/4.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for the celebration game\n\n% Payoff matrix for the celebration game\npayoff('Dinner', 'Dinner', 2, 1).\npayoff('Picnic', 'Dinner', 1, 2).\npayoff('Dinner', 'Picnic', 1, 2).\npayoff('Picnic', 'Picnic', 2, 1).\npayoff('Separate', 'Separate', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(jordan), s0).\ninitially(player(casey), s0).\ninitially(role(jordan, formal_preferrer), s0).\ninitially(role(casey, picnic_preferrer), s0).\ninitially(control(jordan), s0).\ninitially(control(casey), s0).\ninitially(default_move(_, 'Dinner'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2, \n% implying it is a legal state.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Dinner'), S) :- holds(player(P), S).\npossible(move(P, 'Picnic'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Dinner', 'Picnic').\nopposite_move('Picnic', 'Dinner').\n\n% The effects of a move: if P has chosen M, then in the next state this is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e., cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S) :-\n    final(S),\n    holds(role(P1, formal_preferrer), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, picnic_preferrer), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S) :-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S) :-\n    finally(outcome(_, _, _, P2, _, U2), S).\n```\n",
    "game_moves": [],
    "game_players": [],
    "default_move": null,
    "moves": [],
    "payoffs": [],
    "total_payoff": 0,
    "trace_messages": [
        "Line: ``` produced Error: Syntax error: Unexpected end of file\n",
        "Line: ``` produced Error: Syntax error: Unexpected end of file\n",
        "Line: ``` produced Error: Syntax error: Unexpected end of file\n",
        "Line: ``` produced Error: Syntax error: Unexpected end of file\n",
        "Line: ``` produced Error: Syntax error: Unexpected end of file\n"
    ],
    "attempts": 5
}