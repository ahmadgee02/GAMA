{
    "name": "Hahucu",
    "strategy_name": "anti-tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, M):-\n    holds(last_move(O, Mo), S),\n    opposite_move(Mo, M).",
    "status": "runtime_error",
    "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous payoff/4.\n\n% Game specific predicates for Jordan and Casey's celebration\n\n% Payoff matrix for the celebration decision\npayoff('Dinner', 'Dinner', 2, 1).\npayoff('Picnic', 'Picnic', 1, 2).\npayoff('Separate', 'Separate', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(jordan), s0).\ninitially(player(casey), s0).\ninitially(role(jordan, chooser), s0).\ninitially(role(casey, chooser), s0).\ninitially(control(jordan), s0).\ninitially(control(casey), s0).\ninitially(default_move(_, 'Separate'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Dinner'), S) :- holds(player(P), S).\npossible(move(P, 'Picnic'), S) :- holds(player(P), S).\npossible(move(P, 'Separate'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Dinner', 'Picnic').\nopposite_move('Picnic', 'Dinner').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(Jordan, M1, U1, Casey, M2, U2), S) :-\n    final(S),\n    holds(role(Jordan, chooser), S),\n    holds(did(Jordan, M1), S),\n    holds(role(Casey, chooser), S),\n    holds(did(Casey, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(Jordan, U1), S) :-\n    finally(outcome(Jordan, _, U1, _, _, _), S).\nfinally(goal(Casey, U2), S) :-\n    finally(outcome(_, _, _, Casey, _, U2), S).\n",
    "game_moves": [
        "Separate",
        "Dinner",
        "Picnic"
    ],
    "game_players": [
        "jordan",
        "casey"
    ],
    "default_move": "Separate",
    "moves": [
        "Separate"
    ],
    "payoffs": [
        0.0
    ],
    "total_payoff": 0.0,
    "trace_messages": [],
    "attempts": 0
}