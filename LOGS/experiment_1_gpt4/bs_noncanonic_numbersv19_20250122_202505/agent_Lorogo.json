{
    "name": "Lorogo",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n% Discontiguous declaration\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous payoff/4.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the family vacation game\npayoff('Disneyland', 'Disneyland', 2, 1).\npayoff('Yellowstone', 'Yellowstone', 1, 2).\npayoff('Disneyland', 'Yellowstone', 0, 0).\npayoff('Yellowstone', 'Disneyland', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% Initial conditions: who is a player, their role, and player control\ninitially(player(sibling1), s0).\ninitially(player(sibling2), s0).\ninitially(role(sibling1, thrill_seeker), s0).\ninitially(role(sibling2, nature_lover), s0).\ninitially(control(sibling1), s0).\ninitially(control(sibling2), s0).\ninitially(default_move(_, 'Disneyland'), s0).\n\n% Final states definition: no specific predicates are given, so we derive from game/2\nfinal(do(move(_S2, _M2), do(move(_S1, _M1), S))):- initial(S).\n\n% Legal move definition\nlegal(move(P, M), S):- \n    possible(move(P, M), S), \n    holds(control(P), S).\n\n% Possible moves for each player\npossible(move(P, 'Disneyland'), S):- holds(player(P), S).\npossible(move(P, 'Yellowstone'), S):- holds(player(P), S).\n\n% Opposite moves for contrasting decisions\nopposite_move('Disneyland', 'Yellowstone').\nopposite_move('Yellowstone', 'Disneyland').\n\n% Effect of the move: registers the move of player\neffect(did(P, M), move(P, M), _S).\n\n% Abnormal states where player loses control post-move\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: outcome with players, Moves, and Utilities\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):- \n    final(S),\n    holds(role(P1, thrill_seeker), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, nature_lover), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(P1, U1), S):- \n    finally(outcome(P1, _, U1, _, _, _), S).\n\nfinally(goal(P2, U2), S):- \n    finally(outcome(_, _, _, P2, _, U2), S).\n",
    "game_moves": [
        "Disneyland",
        "Yellowstone"
    ],
    "game_players": [
        "sibling1",
        "sibling2"
    ],
    "default_move": "Disneyland",
    "moves": [
        "Disneyland",
        "Disneyland",
        "Yellowstone",
        "Yellowstone"
    ],
    "payoffs": [
        2.0,
        0.0,
        1.0,
        0.0
    ],
    "total_payoff": 3.0,
    "trace_messages": [],
    "attempts": 1
}