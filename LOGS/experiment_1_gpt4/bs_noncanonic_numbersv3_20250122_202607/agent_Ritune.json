{
    "name": "Ritune",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": " \n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for Roommates' Movie Dilemma\n\n% Payoff matrix for Roommates' Movie Dilemma\npayoff('action', 'action', 1, 2).\npayoff('comedy', 'comedy', 2, 1).\npayoff('action', 'comedy', 0, 0).\npayoff('comedy', 'action', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play\ninitially(player(rm1), s0).\ninitially(player(rm2), s0).\ninitially(role(rm1, comedy_lover), s0).\ninitially(role(rm2, action_lover), s0).\ninitially(control(rm1), s0).\ninitially(control(rm2), s0).\ninitially(default_move(_, 'comedy'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_Rm2, _M2), do(move(_Rm1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(Rm, M), S):- possible(move(Rm, M), S), holds(control(Rm), S).\n\n% What is possible for a player to choose\npossible(move(Rm, 'action'), S):- holds(player(Rm), S).\npossible(move(Rm, 'comedy'), S):- holds(player(Rm), S).\n\n% Moves that are opposite to each other\nopposite_move('action', 'comedy').\nopposite_move('comedy', 'action').\n\n% The effects of a move: if Rm has chosen M, then in the next state this\n% is what they did.\neffect(did(Rm, M), move(Rm, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(Rm), move(Rm, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(Rm1, M1, U1, Rm2, M2, U2), S):-\n    final(S),\n    holds(role(Rm1, comedy_lover), S),\n    holds(did(Rm1, M1), S),\n    holds(role(Rm2, action_lover), S),\n    holds(did(Rm2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(Rm1, U1), S):-\n    finally(outcome(Rm1, _, U1, _, _, _), S).\nfinally(goal(Rm2, U2), S):-\n    finally(outcome(_, _, _, Rm2, _, U2), S).\n",
    "game_moves": [
        "action",
        "comedy"
    ],
    "game_players": [
        "rm1",
        "rm2"
    ],
    "default_move": "comedy",
    "moves": [
        "comedy",
        "comedy",
        "action",
        "action"
    ],
    "payoffs": [
        2.0,
        0.0,
        1.0,
        0.0
    ],
    "total_payoff": 3.0,
    "trace_messages": [],
    "attempts": 1
}