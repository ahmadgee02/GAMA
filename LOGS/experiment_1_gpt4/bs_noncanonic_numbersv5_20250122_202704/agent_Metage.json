{
    "name": "Metage",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "runtime_error",
    "game_rules": "\n% Weekend Getaway Game - Domain Specific Axioms\n\n% Situations, roles, players, and control for the initial state\ninitial(s0).\n\ninitially(player(partner1), s0).\ninitially(player(partner2), s0).\ninitially(role(partner1, mountains), s0).\ninitially(role(partner2, beach), s0).\ninitially(control(partner1), s0).\ninitially(control(partner2), s0).\ninitially(default_move(_, 'home'), s0).\n\n% Payoff matrix for Weekend Getaway\npayoff('mountains', 'mountains', 2, 1).\npayoff('beach', 'beach', 1, 2).\npayoff('mountains', 'beach', 0, 0).\npayoff('beach', 'mountains', 0, 0).\npayoff('home', 'mountains', 0, 0).\npayoff('mountains', 'home', 0, 0).\npayoff('home', 'beach', 0, 0).\npayoff('beach', 'home', 0, 0).\npayoff('home', 'home', 0, 0).\n\n% Defining final state\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):- initial(S).\n\n% A legal move is one that the player can choose according to their control in the current state\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'mountains'), S):- holds(player(P), S).\npossible(move(P, 'beach'), S):- holds(player(P), S).\npossible(move(P, 'home'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other\nopposite_move('mountains', 'beach').\nopposite_move('beach', 'mountains').\n\n% The effects of a move\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcomes with players, Moves, and Utilities\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, mountains), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, beach), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1, _, U1, _, _, _), S).\n\nfinally(goal(P2, U2), S):-\n    finally(outcome(_, _, _, P2, _, U2), S).\n\n",
    "game_moves": [
        "mountains",
        "home",
        "beach"
    ],
    "game_players": [
        "partner1",
        "partner2"
    ],
    "default_move": "home",
    "moves": [
        "home",
        "home"
    ],
    "payoffs": [
        0.0
    ],
    "total_payoff": 0.0,
    "trace_messages": [],
    "attempts": 1
}