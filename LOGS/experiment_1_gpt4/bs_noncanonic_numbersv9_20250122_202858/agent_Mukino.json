{
    "name": "Mukino",
    "strategy_name": "anti-tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, M):-\n    holds(last_move(O, Mo), S),\n    opposite_move(Mo, M).",
    "status": "runtime_error",
    "game_rules": "\n:- discontiguous player/2.\n:- discontiguous role/2.\n:- discontiguous control/2.\n:- discontiguous default_move/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n\n% Payoff matrix for the Strategy Session game\npayoff('GrandConferenceHall', 'GrandConferenceHall', 2, 1).\npayoff('TechInnovationCenter', 'TechInnovationCenter', 1, 2).\npayoff('NoAgreement', 'NoAgreement', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(m1), s0).\ninitially(player(m2), s0).\ninitially(role(m1, hall_supporter), s0).\ninitially(role(m2, tech_supporter), s0).\ninitially(control(m1), s0).\ninitially(control(m2), s0).\ninitially(default_move(_, 'NoAgreement'), s0).\n\n% When a state is final: no need to check content as it generated by game/2, implying it is a legal state.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'GrandConferenceHall'), S):- holds(player(P), S).\npossible(move(P, 'TechInnovationCenter'), S):- holds(player(P), S).\npossible(move(P, 'NoAgreement'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('GrandConferenceHall', 'TechInnovationCenter').\nopposite_move('TechInnovationCenter', 'GrandConferenceHall').\n\n% The effects of a move: if P has chosen M, then in the next state this is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player looses control, i.e. cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, hall_supporter), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, tech_supporter), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_, _, _, P2, _, U2), S).\n",
    "game_moves": [
        "GrandConferenceHall",
        "TechInnovationCenter",
        "NoAgreement"
    ],
    "game_players": [
        "m1",
        "m2"
    ],
    "default_move": "NoAgreement",
    "moves": [
        "NoAgreement"
    ],
    "payoffs": [
        0.0
    ],
    "total_payoff": 0.0,
    "trace_messages": [],
    "attempts": 0
}