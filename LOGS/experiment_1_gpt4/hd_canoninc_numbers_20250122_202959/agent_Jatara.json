{
    "name": "Jatara",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "runtime_error",
    "game_rules": " \n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous payoff/4.\n:- discontiguous opposite_move/2.\n\n% Payoff matrix for Chicken game\npayoff('Straight', 'Straight', -10, -10).\npayoff('Swerve', 'Straight', -1, 1).\npayoff('Straight', 'Swerve', 1, -1).\npayoff('Swerve', 'Swerve', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(p1), s0).\ninitially(player(p2), s0).\ninitially(role(p1, driver1), s0).\ninitially(role(p2, driver2), s0).\ninitially(control(p1), s0).\ninitially(control(p2), s0).\ninitially(default_move(_, 'Swerve'), s0).\n\n% Moves that are opposite to each other.\nopposite_move('Swerve', 'Straight').\nopposite_move('Straight', 'Swerve').\n\n% What is possible for a player to choose\npossible(move(P, 'Swerve'), S):- holds(player(P), S).\npossible(move(P, 'Straight'), S):- holds(player(P), S).\n\n% The effects of a move: if P has chosen M, then in the next state this is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e. cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, driver1), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, driver2), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_, _, _, P2, _, U2), S).\n\n",
    "game_moves": [
        "Swerve",
        "Straight"
    ],
    "game_players": [
        "p1",
        "p2"
    ],
    "default_move": "Swerve",
    "moves": [
        "Swerve"
    ],
    "payoffs": [],
    "total_payoff": 0,
    "trace_messages": [],
    "attempts": 1
}