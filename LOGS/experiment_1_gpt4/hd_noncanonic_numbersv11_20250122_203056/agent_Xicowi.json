{
    "name": "Xicowi",
    "strategy_name": "unnamed_strategy",
    "strategy_rules": null,
    "status": "missing_predicates",
    "game_rules": " \n% Domain-specific predicates for the Water Sharing Game\n\n% Declare discontiguous predicates\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the Water Sharing Game\npayoff('Take More', 'Take More', -10, -10).\npayoff('Share Equitably', 'Take More', -2, 2).\npayoff('Take More', 'Share Equitably', 2, -2).\npayoff('Share Equitably', 'Share Equitably', 0, 0).\n\n% Initial state\ninitial(w0).\n\n% What holds initially: the farmers, their roles, and default actions\ninitially(player(farmer1), w0).\ninitially(player(farmer2), w0).\ninitially(role(farmer1, decision), w0).\ninitially(role(farmer2, decision), w0).\ninitially(control(farmer1), w0).\ninitially(control(farmer2), w0).\ninitially(default_move(_, 'Share Equitably'), w0).\n\n% When a state is final: no need to check content as it generated by game/2\nfinal(do(move(_F2, _M2), do(move(_F1, _M1), S))):- initial(S).\n\n% A legal move is a choice that the player can make if it's their turn\nlegal(move(F, M), S):- possible(move(F, M), S), holds(control(F), S).\n\n% Possible moves for a player\npossible(move(F, 'Take More'), S):- holds(player(F), S).\npossible(move(F, 'Share Equitably'), S):- holds(player(F), S).\n\n% Moves that are opposite to each other\nopposite_move('Share Equitably', 'Take More').\nopposite_move('Take More', 'Share Equitably').\n\n% Effect of a move: if a farmer has chosen an action, track that action\neffect(did(F, M), move(F, M), _S).\n\n% Effects of a move: once moved, a player loses control\nabnormal(control(F), move(F, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Points\nfinally(outcome(F1, M1, P1, F2, M2, P2), S):-\n    final(S),\n    holds(role(F1, decision), S),\n    holds(did(F1, M1), S),\n    holds(role(F2, decision), S),\n    holds(did(F2, M2), S),\n    payoff(M1, M2, P1, P2).\n\n% Goals achieved by the players\nfinally(goal(F1, P1), S):-\n    finally(outcome(F1, _, P1, _, _, _), S).\nfinally(goal(F2, P2), S):-\n    finally(outcome(_, _, _, F2, _, P2), S).\n",
    "game_moves": [],
    "game_players": [],
    "default_move": null,
    "moves": [],
    "payoffs": [],
    "total_payoff": 0,
    "trace_messages": [],
    "attempts": 1
}