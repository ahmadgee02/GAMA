{
    "name": "Zuwune",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": " \n:- discontiguous p/3.\n\n/* Game specific predicates for the inheritance division game */\n\n% Payoff matrix for the inheritance division game\npayoff('Demand', 'Demand', -5, -5).\npayoff('Agree', 'Demand', -3, 3).\npayoff('Demand', 'Agree', 3, -3).\npayoff('Agree', 'Agree', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(sibling1), s0).\ninitially(player(sibling2), s0).\ninitially(role(sibling1, row), s0).\ninitially(role(sibling2, col), s0).\ninitially(control(sibling1), s0).\ninitially(control(sibling2), s0).\ninitially(default_move(_, 'Agree'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_S2, _M2), do(move(_S1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(S, M), S0) :- possible(move(S, M), S0), holds(control(S), S0).\n\n% What is possible for a player to choose\npossible(move(Sibling, 'Demand'), S0) :- holds(player(Sibling), S0).\npossible(move(Sibling, 'Agree'), S0) :- holds(player(Sibling), S0).\n\n% Moves that are opposite to each other.\nopposite_move('Agree', 'Demand').\nopposite_move('Demand', 'Agree').\n\n% The effects of a move: if Sibling has chosen M, then in the next state this\n% is what they did.\neffect(did(Sibling, M), move(Sibling, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(Sibling), move(Sibling, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(S1, M1, U1, S2, M2, U2), S) :-\n    final(S),\n    holds(role(S1, row), S),\n    holds(did(S1, M1), S),\n    holds(role(S2, col), S),\n    holds(did(S2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(S1, U1), S) :-\n    finally(outcome(S1, _, U1, _, _, _), S).\nfinally(goal(S2, U2), S) :-\n    finally(outcome(_, _, _, S2, _, U2), S).\n",
    "game_moves": [
        "Agree",
        "Demand"
    ],
    "game_players": [
        "sibling1",
        "sibling2"
    ],
    "default_move": "Agree",
    "moves": [
        "Agree",
        "Agree",
        "Demand",
        "Demand"
    ],
    "payoffs": [
        0.0,
        -3.0,
        -5.0,
        3.0
    ],
    "total_payoff": -5.0,
    "trace_messages": [],
    "attempts": 1
}