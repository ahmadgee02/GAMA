{
    "name": "Fafiro",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n\n:- discontiguous payoff/4.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for CO2 Emission Reduction game\npayoff('High', 'High', -10, -10).\npayoff('Cut', 'High', -4, 4).\npayoff('High', 'Cut', 4, -4).\npayoff('Cut', 'Cut', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(country1), s0).\ninitially(player(country2), s0).\ninitially(role(country1, row), s0).\ninitially(role(country2, col), s0).\ninitially(control(country1), s0).\ninitially(control(country2), s0).\ninitially(default_move(_, 'High'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_C2, _M2), do(move(_C1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(Country, Move), S) :- possible(move(Country, Move), S), holds(control(Country), S).\n\n% What is possible for a player to choose\npossible(move(Country, 'High'), S) :- holds(player(Country), S).\npossible(move(Country, 'Cut'), S) :- holds(player(Country), S).\n\n% Moves that are opposite to each other.\nopposite_move('High', 'Cut').\nopposite_move('Cut', 'High').\n\n% The effects of a move: if Country has chosen Move, then in the next state this\n% is what they did.\neffect(did(Country, Move), move(Country, Move), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(Country), move(Country, _Move), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(C1, M1, U1, C2, M2, U2), S) :-\n    final(S),\n    holds(role(C1, row), S),\n    holds(did(C1, M1), S),\n    holds(role(C2, col), S),\n    holds(did(C2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(C1, U1), S) :-\n    finally(outcome(C1, _, U1, _, _, _), S).\nfinally(goal(C2, U2), S) :-\n    finally(outcome(_, _, _, C2, _, U2), S).\n\n",
    "game_moves": [
        "High",
        "Cut"
    ],
    "game_players": [
        "country1",
        "country2"
    ],
    "default_move": "High",
    "moves": [
        "High",
        "High",
        "Cut",
        "Cut"
    ],
    "payoffs": [
        -10.0,
        4.0,
        0.0,
        -4.0
    ],
    "total_payoff": -10.0,
    "trace_messages": [],
    "attempts": 1
}