{
    "name": "Zefaga",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "runtime_error",
    "game_rules": "\n\n:- discontiguous possible/3.\n:- discontiguous initial/1.\n:- discontiguous payoff/4.\n\n% CO2 Emission Reduction Negotiation Game specific predicates\n\n% Payoff matrix for CO2 Emission Reduction\npayoff('High', 'High', -10, -10).\npayoff('Cuts', 'High', -4, 4).\npayoff('High', 'Cuts', 4, -4).\npayoff('Cuts', 'Cuts', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(c1), s0).\ninitially(player(c2), s0).\ninitially(role(c1,row), s0).\ninitially(role(c2,col), s0).\ninitially(control(c1), s0).\ninitially(control(c2), s0).\ninitially(default_move(_, 'High'), s0).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P,'High'), S):- holds(player(P), S).\npossible(move(P,'Cuts'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('High', 'Cuts').\nopposite_move('Cuts', 'High').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1,M1,U1,P2,M2,U2), S):-\n    final(S),\n    holds(role(P1, row), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, col), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1,_,U1,_,_,_), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_,_,_,P2,_,U2), S).\n\n",
    "game_moves": [
        "Cuts",
        "High"
    ],
    "game_players": [
        "c1",
        "c2"
    ],
    "default_move": "High",
    "moves": [
        "High"
    ],
    "payoffs": [],
    "total_payoff": 0,
    "trace_messages": [],
    "attempts": 1
}