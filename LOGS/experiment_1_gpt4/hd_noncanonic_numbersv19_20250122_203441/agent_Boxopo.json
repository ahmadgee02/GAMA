{
    "name": "Boxopo",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": " \n% The discontiguous declaration for SWI-Prolog\n:- discontiguous payoff/6.\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for Rivertown and Hillview's water game\n\n% Payoff matrix for the water game\npayoff('Prioritize', 'Prioritize', -10, -10).\npayoff('Ration', 'Prioritize', -4, 4).\npayoff('Prioritize', 'Ration', 4, -4).\npayoff('Ration', 'Ration', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(rivertown), s0).\ninitially(player(hillview), s0).\ninitially(role(rivertown, city1), s0).\ninitially(role(hillview, city2), s0).\ninitially(control(rivertown), s0).\ninitially(control(hillview), s0).\ninitially(default_move(_, 'Ration'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_City2, _M2), do(move(_City1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the city has control (is its turn).\nlegal(move(City, M), S):- possible(move(City, M), S), holds(control(City), S).\n\n% What is possible for a city to choose\npossible(move(City, 'Prioritize'), S):- holds(player(City), S).\npossible(move(City, 'Ration'), S):- holds(player(City), S).\n\n% Moves that are opposite to each other.\nopposite_move('Ration', 'Prioritize').\nopposite_move('Prioritize', 'Ration').\n\n% The effects of a move: if City has chosen M, then in the next state this\n% is what they did.\neffect(did(City, M), move(City, M), _S).\n\n% The effects of a move: once a move is made, the city loses control, i.e.\n% cannot move anymore.\nabnormal(control(City), move(City, _M), _S).\n\n% What holds finally: the outcome with cities, Moves, and Utilities.\nfinally(outcome(City1, M1, U1, City2, M2, U2), S):-\n    final(S),\n    holds(role(City1, city1), S),\n    holds(did(City1, M1), S),\n    holds(role(City2, city2), S),\n    holds(did(City2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the cities.\nfinally(goal(City1, U1), S):-\n    finally(outcome(City1,_,U1,_,_,_), S).\nfinally(goal(City2, U2), S):-\n    finally(outcome(_,_,_,City2,_,U2), S).\n",
    "game_moves": [
        "Prioritize",
        "Ration"
    ],
    "game_players": [
        "rivertown",
        "hillview"
    ],
    "default_move": "Ration",
    "moves": [
        "Ration",
        "Ration",
        "Prioritize",
        "Prioritize"
    ],
    "payoffs": [
        0.0,
        -4.0,
        -10.0,
        4.0
    ],
    "total_payoff": -10.0,
    "trace_messages": [],
    "attempts": 1
}