{
    "name": "Daxaru",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n:- discontiguous payoff/6.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for Water Reservoir Game */\n\n/* Payoff matrix for the water reservoir game */\npayoff('prioritize', 'prioritize', -10, -10).\npayoff('ration', 'prioritize', -4, 4).\npayoff('prioritize', 'ration', 4, -4).\npayoff('ration', 'ration', 0, 0).\n\n/* Initial state */\ninitial(s0).\n\n/* What holds initially: who is a player, their role, and whether they can play */\ninitially(player(rivertown), s0).\ninitially(player(hillview), s0).\ninitially(role(rivertown, user1), s0).\ninitially(role(hillview, user2), s0).\ninitially(control(rivertown), s0).\ninitially(control(hillview), s0).\ninitially(default_move(_, 'ration'), s0).\n\n/* When a state is final: no need to check content as it generated by game/2, \n   implying it is a legal state. */\nfinal(do(move(_City2, _Move2), do(move(_City1, _Move1), S))):- initial(S).\n\n/* A legal move is a possible move where the city has control (is its turn) */\nlegal(move(City, Move), S):- possible(move(City, Move), S), holds(control(City), S).\n\n/* What is possible for a city to choose */\npossible(move(City, 'prioritize'), S):- holds(player(City), S).\npossible(move(City, 'ration'), S):- holds(player(City), S).\n\n/* Moves that are opposite to each other */\nopposite_move('prioritize', 'ration').\nopposite_move('ration', 'prioritize').\n\n/* The effects of a move: if a city has chosen Move, then in the next state this \n   is what they did */\neffect(did(City, Move), move(City, Move), _S).\n\n/* The effects of a move: once a move is made, the city loses control, i.e.\n   cannot move anymore */\nabnormal(control(City), move(City, _Move), _S).\n\n/* What holds finally: the outcome with cities, Moves, and Utilities */\nfinally(outcome(C1, Move1, U1, C2, Move2, U2), S):-\n    final(S),\n    holds(role(C1, user1), S),\n    holds(did(C1, Move1), S),\n    holds(role(C2, user2), S),\n    holds(did(C2, Move2), S),\n    payoff(Move1, Move2, U1, U2).\n\n/* Goals achieved by the cities */\nfinally(goal(C1, U1), S):-\n    finally(outcome(C1, _, U1, _, _, _), S).\nfinally(goal(C2, U2), S):-\n    finally(outcome(_, _, _, C2, _, U2), S).\n",
    "game_moves": [
        "prioritize",
        "ration"
    ],
    "game_players": [
        "rivertown",
        "hillview"
    ],
    "default_move": "ration",
    "moves": [
        "ration",
        "ration",
        "prioritize",
        "prioritize"
    ],
    "payoffs": [
        0.0,
        -4.0,
        -10.0,
        4.0
    ],
    "total_payoff": -10.0,
    "trace_messages": [],
    "attempts": 1
}