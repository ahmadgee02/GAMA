{
    "name": "Deqaqo",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n\n% Declaration for discontiguous predicates\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the Business Partners Game\npayoff('Demand', 'Demand', -25, -25).\npayoff('Split', 'Demand', -2, 2).\npayoff('Demand', 'Split', 2, -2).\npayoff('Split', 'Split', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(b1), s0).\ninitially(player(b2), s0).\ninitially(role(b1, proposer), s0).\ninitially(role(b2, responder), s0).\ninitially(control(b1), s0).\ninitially(control(b2), s0).\ninitially(default_move(_, 'Split'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2, \n% implying it is a legal state.\nfinal(do(move(_B2, _M2), do(move(_B1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is their turn).\nlegal(move(B, M), S):- possible(move(B, M), S), holds(control(B), S).\n\n% What is possible for a player to choose\npossible(move(B,'Demand'), S):- holds(player(B), S).\npossible(move(B,'Split'), S):- holds(player(B), S).\n\n% Moves that are opposite to each other.\nopposite_move('Demand', 'Split').\nopposite_move('Split', 'Demand').\n\n% The effects of a move: if B has chosen M, then in the next state this \n% is what they did.\neffect(did(B, M), move(B, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(B), move(B, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(B1, M1, U1, B2, M2, U2), S):-\n    final(S),\n    holds(role(B1, proposer), S),\n    holds(did(B1, M1), S),\n    holds(role(B2, responder), S),\n    holds(did(B2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(B1, U1), S):-\n    finally(outcome(B1, _, U1, _, _, _), S).\nfinally(goal(B2, U2), S):-\n    finally(outcome(_, _, _, B2, _, U2), S).\n\n",
    "game_moves": [
        "Demand",
        "Split"
    ],
    "game_players": [
        "b1",
        "b2"
    ],
    "default_move": "Split",
    "moves": [
        "Split",
        "Split",
        "Demand",
        "Demand"
    ],
    "payoffs": [
        0.0,
        -2.0,
        -25.0,
        2.0
    ],
    "total_payoff": -25.0,
    "trace_messages": [],
    "attempts": 1
}