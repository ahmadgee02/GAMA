{
    "name": "Qaloxo",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n\n:- discontiguous holds/2.\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(husband), s0).\ninitially(player(wife), s0).\ninitially(role(husband, row), s0).\ninitially(role(wife, col), s0).\ninitially(control(husband), s0).\ninitially(control(wife), s0).\ninitially(default_move(_, 'compromise'), s0).\n\n% Payoff matrix for the negotiation game\npayoff('firm', 'firm', -10, -10).\npayoff('compromise', 'firm', -1, 1).\npayoff('firm', 'compromise', 1, -1).\npayoff('compromise', 'compromise', 0, 0).\n\n% Final state condition\nfinal(do(move(_Wife, _M2), do(move(_Husband, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'firm'), S) :- holds(player(P), S).\npossible(move(P, 'compromise'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other\nopposite_move('compromise', 'firm').\nopposite_move('firm', 'compromise').\n\n% Effects of a move: if P has chosen M, then in the next state this is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(Husband, M1, U1, Wife, M2, U2), S) :-\n    final(S),\n    holds(role(Husband, row), S),\n    holds(did(Husband, M1), S),\n    holds(role(Wife, col), S),\n    holds(did(Wife, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(Husband, U1), S) :-\n    finally(outcome(Husband, _, U1, _, _, _), S).\nfinally(goal(Wife, U2), S) :-\n    finally(outcome(_, _, _, Wife, _, U2), S).\n\n",
    "game_moves": [
        "firm",
        "compromise"
    ],
    "game_players": [
        "husband",
        "wife"
    ],
    "default_move": "compromise",
    "moves": [
        "compromise",
        "compromise",
        "firm",
        "firm"
    ],
    "payoffs": [
        0.0,
        -1.0,
        -10.0,
        1.0
    ],
    "total_payoff": -10.0,
    "trace_messages": [],
    "attempts": 1
}