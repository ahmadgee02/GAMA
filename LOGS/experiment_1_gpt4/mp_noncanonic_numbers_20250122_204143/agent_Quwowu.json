{
    "name": "Quwowu",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": " \n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Domain-specific predicates for the gallery game\n\n% Payoff matrix for gallery game\npayoff('PainterA', 'PainterA', 1, -1).\npayoff('PainterA', 'PainterB', -1, 1).\npayoff('PainterB', 'PainterA', -1, 1).\npayoff('PainterB', 'PainterB', 1, -1).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(owner_small_gallery), s0).\ninitially(player(owner_big_gallery), s0).\ninitially(role(owner_small_gallery, small), s0).\ninitially(role(owner_big_gallery, big), s0).\ninitially(control(owner_small_gallery), s0).\ninitially(control(owner_big_gallery), s0).\ninitially(default_move(_, 'PainterA'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_Owner2, _M2), do(move(_Owner1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(Owner, M), S):- possible(move(Owner, M), S), holds(control(Owner), S).\n\n% What is possible for a player to choose\npossible(move(Owner, 'PainterA'), S):- holds(player(Owner), S).\npossible(move(Owner, 'PainterB'), S):- holds(player(Owner), S).\n\n% Moves that are opposite to each other.\nopposite_move('PainterA', 'PainterB').\nopposite_move('PainterB', 'PainterA').\n\n% The effects of a move: if Owner has chosen M, then in the next state this\n% is what they did.\neffect(did(Owner, M), move(Owner, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(Owner), move(Owner, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(Owner1, M1, U1, Owner2, M2, U2), S):-\n    final(S),\n    holds(role(Owner1, small), S),\n    holds(did(Owner1, M1), S),\n    holds(role(Owner2, big), S),\n    holds(did(Owner2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(Owner1, U1), S):-\n    finally(outcome(Owner1, _, U1, _, _, _), S).\nfinally(goal(Owner2, U2), S):-\n    finally(outcome(_, _, _, Owner2, _, U2), S).\n",
    "game_moves": [
        "PainterB",
        "PainterA"
    ],
    "game_players": [
        "owner_small_gallery",
        "owner_big_gallery"
    ],
    "default_move": "PainterA",
    "moves": [
        "PainterA",
        "PainterA",
        "PainterB",
        "PainterB"
    ],
    "payoffs": [
        1.0,
        -1.0,
        1.0,
        -1.0
    ],
    "total_payoff": 0.0,
    "trace_messages": [],
    "attempts": 1
}