{
    "name": "Kiqiqe",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n\n% Discontiguous predicate declarations for SWI Prolog\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous payoff/4.\n\n% Game specific predicates for the Independent vs Chain Bookstore promotion game\n\n% Payoff matrix\npayoff('Fiction', 'Fiction', 2, -2).\npayoff('Non-Fiction', 'Non-Fiction', 2, -2).\npayoff('Fiction', 'Non-Fiction', -3, 3).\npayoff('Non-Fiction', 'Fiction', -3, 3).\n\n% Initial state\ninitial(s0).\n\n% Initial condition setup: players, roles, control, and default moves\ninitially(player(independent), s0).\ninitially(player(chain), s0).\ninitially(role(independent, local), s0).\ninitially(role(chain, national), s0).\ninitially(control(independent), s0).\ninitially(control(chain), s0).\ninitially(default_move(_, 'Fiction'), s0).\n\n% When a state is final\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):- initial(S).\n\n% Define what is a legal move\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% Possible moves for a player\npossible(move(P, 'Fiction'), S):- holds(player(P), S).\npossible(move(P, 'Non-Fiction'), S):- holds(player(P), S).\n\n% Opposite moves\nopposite_move('Fiction', 'Non-Fiction').\nopposite_move('Non-Fiction', 'Fiction').\n\n% Effect of a move\neffect(did(P, M), move(P, M), _S).\n\n% Control changes after a move\nabnormal(control(P), move(P, _M), _S).\n\n% Define what holds finally: the outcome with players, moves, and utilities\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, local), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, national), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_, _, _, P2, _, U2), S).\n\n",
    "game_moves": [
        "Non-Fiction",
        "Fiction"
    ],
    "game_players": [
        "independent",
        "chain"
    ],
    "default_move": "Fiction",
    "moves": [
        "Fiction",
        "Fiction",
        "Non-Fiction",
        "Non-Fiction"
    ],
    "payoffs": [
        2.0,
        -3.0,
        2.0,
        -3.0
    ],
    "total_payoff": -2.0,
    "trace_messages": [],
    "attempts": 1
}