{
    "name": "Vapixi",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous payoff/6.\n:- discontiguous opposite_move/2.\n\n/* Game specific predicates for the Bookstore Promotion Game */\n\n% Payoff matrix for the Bookstore Promotion Game\npayoff('fiction', 'fiction', 2, -2).\npayoff('non-fiction', 'non-fiction', 2, -2).\npayoff('fiction', 'non-fiction', -3, 3).\npayoff('non-fiction', 'fiction', -3, 3).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(independent_bookstore), s0).\ninitially(player(national_chain), s0).\ninitially(role(independent_bookstore, local), s0).\ninitially(role(national_chain, national), s0).\ninitially(control(independent_bookstore), s0).\ninitially(control(national_chain), s0).\ninitially(default_move(_, 'fiction'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_Store2, _M2), do(move(_Store1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(Store, M), S):- possible(move(Store, M), S), holds(control(Store), S).\n\n% What is possible for a player to choose\npossible(move(Store, 'fiction'), S):- holds(player(Store), S).\npossible(move(Store, 'non-fiction'), S):- holds(player(Store), S).\n\n% Moves that are opposite to each other.\nopposite_move('fiction', 'non-fiction').\nopposite_move('non-fiction', 'fiction').\n\n% The effects of a move: if a store has chosen a genre, then in the next state this\n% is what they did.\neffect(did(Store, M), move(Store, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(Store), move(Store, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(Store1,M1,U1,Store2,M2,U2), S):-\n    final(S),\n    holds(role(Store1, local), S),\n    holds(did(Store1, M1), S),\n    holds(role(Store2, national), S),\n    holds(did(Store2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(Store1, U1), S):-\n    finally(outcome(Store1,_,U1,_,_,_), S).\nfinally(goal(Store2, U2), S):-\n    finally(outcome(_,_,_,Store2,_,U2), S).\n",
    "game_moves": [
        "non-fiction",
        "fiction"
    ],
    "game_players": [
        "independent_bookstore",
        "national_chain"
    ],
    "default_move": "fiction",
    "moves": [
        "fiction",
        "fiction",
        "non-fiction",
        "non-fiction"
    ],
    "payoffs": [
        2.0,
        -3.0,
        2.0,
        -3.0
    ],
    "total_payoff": -2.0,
    "trace_messages": [],
    "attempts": 1
}