{
    "name": "Viyivu",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "  \n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous payoff/4.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n\n% Payoff matrix for the Coffee Game\npayoff('latte', 'latte', 2, -2).\npayoff('cold_brew', 'latte', -3, 3).\npayoff('latte', 'cold_brew', 3, -3).\npayoff('cold_brew', 'cold_brew', 2, -2).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(local_coffee_shop), s0).\ninitially(player(large_coffee_chain), s0).\ninitially(role(local_coffee_shop, local), s0).\ninitially(role(large_coffee_chain, large), s0).\ninitially(control(local_coffee_shop), s0).\ninitially(control(large_coffee_chain), s0).\ninitially(default_move(_, 'latte'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_Shop2, _M2), do(move(_Shop1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(Shop, M), S):- possible(move(Shop, M), S), holds(control(Shop), S).\n\n% What is possible for a player to choose\npossible(move(Shop, 'latte'), S):- holds(player(Shop), S).\npossible(move(Shop, 'cold_brew'), S):- holds(player(Shop), S).\n\n% Moves that are opposite to each other.\nopposite_move('latte', 'cold_brew').\nopposite_move('cold_brew', 'latte').\n\n% The effects of a move: if Shop has chosen M, then in the next state this\n% is what they did.\neffect(did(Shop, M), move(Shop, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(Shop), move(Shop, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(S1, M1, U1, S2, M2, U2), S):-\n    final(S),\n    holds(role(S1, local), S),\n    holds(did(S1, M1), S),\n    holds(role(S2, large), S),\n    holds(did(S2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(S1, U1), S):-\n    finally(outcome(S1, _, U1, _, _, _), S).\nfinally(goal(S2, U2), S):-\n    finally(outcome(_, _, _, S2, _, U2), S).\n\n",
    "game_moves": [
        "latte",
        "cold_brew"
    ],
    "game_players": [
        "local_coffee_shop",
        "large_coffee_chain"
    ],
    "default_move": "latte",
    "moves": [
        "latte",
        "latte",
        "cold_brew",
        "cold_brew"
    ],
    "payoffs": [
        2.0,
        3.0,
        2.0,
        -3.0
    ],
    "total_payoff": 4.0,
    "trace_messages": [],
    "attempts": 1
}