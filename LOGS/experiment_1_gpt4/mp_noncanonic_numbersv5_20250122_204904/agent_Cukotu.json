{
    "name": "Cukotu",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous finally/2.\n\n% Game specific predicates for the election campaign game\n\n% Payoff matrix for the campaign focus\npayoff('economic', 'economic', 5, -5).\npayoff('social', 'social', 5, -5).\npayoff('economic', 'social', -4, 4).\npayoff('social', 'economic', -4, 4).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(candA), s0).\ninitially(player(candB), s0).\ninitially(role(candA, underdog), s0).\ninitially(role(candB, frontrunner), s0).\ninitially(control(candA), s0).\ninitially(control(candB), s0).\ninitially(default_move(_, 'economic'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_CandB, _MoveB), do(move(_CandA, _MoveA), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(Cand, Move), S):- possible(move(Cand, Move), S), holds(control(Cand), S).\n\n% What is possible for a candidate to choose\npossible(move(Cand, 'economic'), S):- holds(player(Cand), S).\npossible(move(Cand, 'social'), S):- holds(player(Cand), S).\n\n% Moves that are opposite to each other.\nopposite_move('economic', 'social').\nopposite_move('social', 'economic').\n\n% The effects of a move: if Cand has chosen Move, then in the next state this\n% is what they did.\neffect(did(Cand, Move), move(Cand, Move), _S).\n\n% The effects of a move: once a move is made, the candidate loses control, i.e.,\n% cannot move anymore.\nabnormal(control(Cand), move(Cand, _Move), _S).\n\n% What holds finally: the outcome with candidates, Moves, and Utilities.\nfinally(outcome(CandA, MoveA, UtilA, CandB, MoveB, UtilB), S):-\n    final(S),\n    holds(role(CandA, underdog), S),\n    holds(did(CandA, MoveA), S),\n    holds(role(CandB, frontrunner), S),\n    holds(did(CandB, MoveB), S),\n    payoff(MoveA, MoveB, UtilA, UtilB).\n\n% Goals achieved by the candidates.\nfinally(goal(CandA, UtilA), S):-\n    finally(outcome(CandA, _, UtilA, _, _, _), S).\nfinally(goal(CandB, UtilB), S):-\n    finally(outcome(_, _, _, CandB, _, UtilB), S).\n",
    "game_moves": [
        "economic",
        "social"
    ],
    "game_players": [
        "candA",
        "candB"
    ],
    "default_move": "economic",
    "moves": [
        "economic",
        "economic",
        "social",
        "social"
    ],
    "payoffs": [
        5.0,
        -4.0,
        5.0,
        -4.0
    ],
    "total_payoff": 2.0,
    "trace_messages": [],
    "attempts": 1
}