{
    "name": "Honumo",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n\n:- discontiguous initially/2.\n:- discontiguous payoff/4.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous final/1.\n\n% Payoff matrix for the political campaign game\npayoff('Economic', 'Economic', 5, -5).\npayoff('Social', 'Social', 5, -5).\npayoff('Economic', 'Social', -4, 4).\npayoff('Social', 'Economic', -4, 4).\n\n% Initial state\ninitial(s0).\n\n% Initial attributes\ninitially(player(a), s0).\ninitially(player(b), s0).\ninitially(role(a, underdog), s0).\ninitially(role(b, frontrunner), s0).\ninitially(control(a), s0).\ninitially(control(b), s0).\ninitially(default_move(_, 'Economic'), s0).\n\n% When a state is final\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% Legal move if possible and player has control\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% Possible moves for each player\npossible(move(P,'Economic'), S) :- holds(player(P), S).\npossible(move(P,'Social'), S) :- holds(player(P), S).\n\n% Opposite moves (for logical consistency, though not explicitly needed here)\nopposite_move('Economic', 'Social').\nopposite_move('Social', 'Economic').\n\n% Effects of moves\neffect(did(P, M), move(P, M), _S).\n\n% Player loses control after making a move\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S) :-\n    final(S),\n    holds(role(P1, underdog), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, frontrunner), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S) :-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S) :-\n    finally(outcome(_, _, _, P2, _, U2), S).\n\n",
    "game_moves": [
        "Economic",
        "Social"
    ],
    "game_players": [
        "a",
        "b"
    ],
    "default_move": "Economic",
    "moves": [
        "Economic",
        "Economic",
        "Social",
        "Social"
    ],
    "payoffs": [
        5.0,
        -4.0,
        5.0,
        -4.0
    ],
    "total_payoff": 2.0,
    "trace_messages": [],
    "attempts": 1
}