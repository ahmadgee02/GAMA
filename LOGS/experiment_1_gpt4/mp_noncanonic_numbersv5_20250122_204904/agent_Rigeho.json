{
    "name": "Rigeho",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n\n% Declaration for predicates that might not be contiguous\n:- discontiguous payoff/4.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the political campaign game\npayoff('economic', 'economic', 5, -5).\npayoff('social', 'social', 5, -5).\npayoff('economic', 'social', -4, 4).\npayoff('social', 'economic', -4, 4).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(candA), s0).\ninitially(player(candB), s0).\ninitially(role(candA, underdog), s0).\ninitially(role(candB, frontrunner), s0).\ninitially(control(candA), s0).\ninitially(control(candB), s0).\ninitially(default_move(_, 'economic'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_C2, _M2), do(move(_C1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(C, M), S):- possible(move(C, M), S), holds(control(C), S).\n\n% What is possible for a candidate to choose\npossible(move(C, 'economic'), S):- holds(player(C), S).\npossible(move(C, 'social'), S):- holds(player(C), S).\n\n% Moves that are opposite to each other.\nopposite_move('economic', 'social').\nopposite_move('social', 'economic').\n\n% The effects of a move: if C has chosen M, then in the next state this is what they did.\neffect(did(C, M), move(C, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(C), move(C, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(CandA, M1, U1, CandB, M2, U2), S):-\n    final(S),\n    holds(role(CandA, underdog), S),\n    holds(did(CandA, M1), S),\n    holds(role(CandB, frontrunner), S),\n    holds(did(CandB, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(CandA, U1), S):-\n    finally(outcome(CandA, _, U1, _, _, _), S).\nfinally(goal(CandB, U2), S):-\n    finally(outcome(_, _, _, CandB, _, U2), S).\n\n",
    "game_moves": [
        "economic",
        "social"
    ],
    "game_players": [
        "candA",
        "candB"
    ],
    "default_move": "economic",
    "moves": [
        "economic",
        "economic",
        "social",
        "social"
    ],
    "payoffs": [
        5.0,
        -4.0,
        5.0,
        -4.0
    ],
    "total_payoff": 2.0,
    "trace_messages": [],
    "attempts": 1
}