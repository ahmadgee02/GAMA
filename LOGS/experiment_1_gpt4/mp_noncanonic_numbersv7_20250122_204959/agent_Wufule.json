{
    "name": "Wufule",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n\n% Declare predicates that are not contiguous\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous payoff/4.\n:- discontiguous opposite_move/2.\n:- discontiguous role/2.\n\n% Payoff matrix for the new game\npayoff('device', 'device', 3, -3).\npayoff('wearable', 'wearable', 3, -3).\npayoff('device', 'wearable', -4, 4).\npayoff('wearable', 'device', -4, 4).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(startup), s0).\ninitially(player(giant), s0).\ninitially(role(startup, row), s0).\ninitially(role(giant, col), s0).\ninitially(control(startup), s0).\ninitially(control(giant), s0).\ninitially(default_move(_, 'device'), s0).\n\n% Define the finality of a state (based on two moves having been made).\nfinal(do(move(_Giant, _MGiant), do(move(_Startup, _MStartup), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'device'), S):- holds(player(P), S).\npossible(move(P, 'wearable'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('device', 'wearable').\nopposite_move('wearable', 'device').\n\n% The effects of a move\neffect(did(P, M), move(P, M), _S).\n\n% Once a move is made, the player loses control, i.e., cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(Startup, MStartup, UStartup, Giant, MGiant, UGiant), S):-\n    final(S),\n    holds(role(Startup, row), S),\n    holds(did(Startup, MStartup), S),\n    holds(role(Giant, col), S),\n    holds(did(Giant, MGiant), S),\n    payoff(MStartup, MGiant, UStartup, UGiant).\n\n% Goals achieved by the players.\nfinally(goal(Startup, UStartup), S):-\n    finally(outcome(Startup, _, UStartup, _, _, _), S).\nfinally(goal(Giant, UGiant), S):-\n    finally(outcome(_, _, _, Giant, _, UGiant), S).\n\n",
    "game_moves": [
        "wearable",
        "device"
    ],
    "game_players": [
        "startup",
        "giant"
    ],
    "default_move": "device",
    "moves": [
        "device",
        "device",
        "wearable",
        "wearable"
    ],
    "payoffs": [
        3.0,
        -4.0,
        3.0,
        -4.0
    ],
    "total_payoff": -2.0,
    "trace_messages": [],
    "attempts": 1
}