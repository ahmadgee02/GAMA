{
    "name": "Dikute",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous payoff/6.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the electric vehicle game\npayoff('Sedan', 'Sedan', 10, -10).\npayoff('SUV', 'SUV', 10, -10).\npayoff('Sedan', 'SUV', -15, 15).\npayoff('SUV', 'Sedan', -15, 15).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(small_company), s0).\ninitially(player(large_manufacturer), s0).\ninitially(role(small_company, challenger), s0).\ninitially(role(large_manufacturer, incumbent), s0).\ninitially(control(small_company), s0).\ninitially(control(large_manufacturer), s0).\ninitially(default_move(_, 'Sedan'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_L, _ML), do(move(_S, _MS), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Sedan'), S):- holds(player(P), S).\npossible(move(P, 'SUV'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Sedan', 'SUV').\nopposite_move('SUV', 'Sedan').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Market Share changes.\nfinally(outcome(Small, MS, USmall, Large, ML, ULarge), S):-\n    final(S),\n    holds(role(Small, challenger), S),\n    holds(did(Small, MS), S),\n    holds(role(Large, incumbent), S),\n    holds(did(Large, ML), S),\n    payoff(MS, ML, USmall, ULarge).\n\n% Goals achieved by the players.\nfinally(goal(Small, USmall), S):-\n    finally(outcome(Small,_,USmall,_,_,_), S).\nfinally(goal(Large, ULarge), S):-\n    finally(outcome(_,_,_,Large,_,ULarge), S).\n",
    "game_moves": [
        "SUV",
        "Sedan"
    ],
    "game_players": [
        "small_company",
        "large_manufacturer"
    ],
    "default_move": "Sedan",
    "moves": [
        "Sedan",
        "Sedan",
        "SUV",
        "SUV"
    ],
    "payoffs": [
        10.0,
        -15.0,
        10.0,
        -15.0
    ],
    "total_payoff": -10.0,
    "trace_messages": [],
    "attempts": 1
}