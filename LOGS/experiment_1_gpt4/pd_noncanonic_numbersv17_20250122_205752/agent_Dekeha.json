{
    "name": "Dekeha",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous abnormal/3.\n:- discontiguous effect/3.\n:- discontiguous finally/2.\n:- discontiguous payoff/4.\n\n/* Game specific predicates for Farmers' Drought Dilemma (FDD) */\n\n% Payoff matrix for FDD\npayoff('Collaborate', 'Collaborate', 5, 5).\npayoff('Collaborate', 'Hoard', 2, 8).\npayoff('Hoard', 'Collaborate', 8, 2).\npayoff('Hoard', 'Hoard', 3, 3).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(farmer1), s0).\ninitially(player(farmer2), s0).\ninitially(role(farmer1, left), s0).\ninitially(role(farmer2, right), s0).\ninitially(control(farmer1), s0).\ninitially(control(farmer2), s0).\ninitially(default_move(_, 'Collaborate'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_F2, _M2), do(move(_F1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(Farmer, Move), S):- possible(move(Farmer, Move), S), holds(control(Farmer), S).\n\n% What is possible for a player to choose\npossible(move(Farmer, 'Collaborate'), S):- holds(player(Farmer), S).\npossible(move(Farmer, 'Hoard'), S):- holds(player(Farmer), S).\n\n% Moves that are opposite to each other.\nopposite_move('Collaborate', 'Hoard').\nopposite_move('Hoard', 'Collaborate').\n\n% The effects of a move: if Farmer has chosen Move, then in the next state this\n% is what they did.\neffect(did(Farmer, Move), move(Farmer, Move), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(Farmer), move(Farmer, _Move), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(Farmer1, Move1, Utility1, Farmer2, Move2, Utility2), S):-\n    final(S),\n    holds(role(Farmer1, left), S),\n    holds(did(Farmer1, Move1), S),\n    holds(role(Farmer2, right), S),\n    holds(did(Farmer2, Move2), S),\n    payoff(Move1, Move2, Utility1, Utility2).\n\n% Goals achieved by the players.\nfinally(goal(Farmer1, Utility1), S):-\n    finally(outcome(Farmer1, _, Utility1, _, _, _), S).\nfinally(goal(Farmer2, Utility2), S):-\n    finally(outcome(_, _, _, Farmer2, _, Utility2), S).\n\n",
    "game_moves": [
        "Collaborate",
        "Hoard"
    ],
    "game_players": [
        "farmer1",
        "farmer2"
    ],
    "default_move": "Collaborate",
    "moves": [
        "Collaborate",
        "Collaborate",
        "Hoard",
        "Hoard"
    ],
    "payoffs": [
        5.0,
        2.0,
        3.0,
        8.0
    ],
    "total_payoff": 18.0,
    "trace_messages": [],
    "attempts": 1
}