{
    "name": "Wacaro",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n:- discontiguous payoff/6.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for the Cold War Disarmament game\n\n% Payoff matrix for Cold War Disarmament\npayoff('Build', 'Build', 4, 4).\npayoff('Disarm', 'Build', 1, 7).\npayoff('Build', 'Disarm', 7, 1).\npayoff('Disarm', 'Disarm', 6, 6).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(nation1), s0).\ninitially(player(nation2), s0).\ninitially(role(nation1, row), s0).\ninitially(role(nation2, col), s0).\ninitially(control(nation1), s0).\ninitially(control(nation2), s0).\ninitially(default_move(_, 'Disarm'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_Nation2, _Move2), do(move(_Nation1, _Move1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (it is their turn).\nlegal(move(Nation, Move), S) :- possible(move(Nation, Move), S), holds(control(Nation), S).\n\n% What is possible for a player to choose\npossible(move(Nation, 'Build'), S) :- holds(player(Nation), S).\npossible(move(Nation, 'Disarm'), S) :- holds(player(Nation), S).\n\n% Moves that are opposite to each other.\nopposite_move('Disarm', 'Build').\nopposite_move('Build', 'Disarm').\n\n% The effects of a move: if Nation has chosen Move, then in the next state this\n% is what they did.\neffect(did(Nation, Move), move(Nation, Move), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(Nation), move(Nation, _Move), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(Nation1, Move1, Utility1, Nation2, Move2, Utility2), S) :-\n    final(S),\n    holds(role(Nation1, row), S),\n    holds(did(Nation1, Move1), S),\n    holds(role(Nation2, col), S),\n    holds(did(Nation2, Move2), S),\n    payoff(Move1, Move2, Utility1, Utility2).\n\n% Goals achieved by the players.\nfinally(goal(Nation1, Utility1), S) :-\n    finally(outcome(Nation1, _, Utility1, _, _, _), S).\n\nfinally(goal(Nation2, Utility2), S) :-\n    finally(outcome(_, _, _, Nation2, _, Utility2), S).\n",
    "game_moves": [
        "Build",
        "Disarm"
    ],
    "game_players": [
        "nation1",
        "nation2"
    ],
    "default_move": "Disarm",
    "moves": [
        "Disarm",
        "Disarm",
        "Build",
        "Build"
    ],
    "payoffs": [
        6.0,
        1.0,
        4.0,
        7.0
    ],
    "total_payoff": 18.0,
    "trace_messages": [],
    "attempts": 1
}