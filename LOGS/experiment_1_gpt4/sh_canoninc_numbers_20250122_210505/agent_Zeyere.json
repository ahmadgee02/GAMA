{
    "name": "Zeyere",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous payoff/4.\n\n% Payoff matrix for Stag Hunt\npayoff('HuntStag', 'HuntStag', 3, 3).\npayoff('HuntStag', 'HuntHare', 0, 2).\npayoff('HuntHare', 'HuntStag', 2, 0).\npayoff('HuntHare', 'HuntHare', 1, 1).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(hunter1), s0).\ninitially(player(hunter2), s0).\ninitially(role(hunter1, row), s0).\ninitially(role(hunter2, col), s0).\ninitially(control(hunter1), s0).\ninitially(control(hunter2), s0).\ninitially(default_move(_, 'HuntHare'), s0).\n\n% When a state is final: no need to check content as it's generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_H2, _M2), do(move(_H1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(H, M), S) :- possible(move(H, M), S), holds(control(H), S).\n\n% What is possible for a player to choose\npossible(move(H, 'HuntStag'), S) :- holds(player(H), S).\npossible(move(H, 'HuntHare'), S) :- holds(player(H), S).\n\n% Moves that are opposite to each other.\nopposite_move('HuntStag', 'HuntHare').\nopposite_move('HuntHare', 'HuntStag').\n\n% The effects of a move: if H has chosen M, then in the next state this\n% is what they did.\neffect(did(H, M), move(H, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(H), move(H, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(H1, M1, U1, H2, M2, U2), S) :-\n    final(S),\n    holds(role(H1, row), S),\n    holds(did(H1, M1), S),\n    holds(role(H2, col), S),\n    holds(did(H2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(H1, U1), S) :-\n    finally(outcome(H1, _, U1, _, _, _), S).\nfinally(goal(H2, U2), S) :-\n    finally(outcome(_, _, _, H2, _, U2), S).\n",
    "game_moves": [
        "HuntHare",
        "HuntStag"
    ],
    "game_players": [
        "hunter1",
        "hunter2"
    ],
    "default_move": "HuntHare",
    "moves": [
        "HuntHare",
        "HuntHare",
        "HuntStag",
        "HuntStag"
    ],
    "payoffs": [
        1.0,
        2.0,
        3.0,
        0.0
    ],
    "total_payoff": 6.0,
    "trace_messages": [],
    "attempts": 1
}