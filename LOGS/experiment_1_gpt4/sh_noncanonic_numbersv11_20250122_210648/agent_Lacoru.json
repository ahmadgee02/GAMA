{
    "name": "Lacoru",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n:- discontiguous payoff/6.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for the Collaboration Game\n\n% Payoff matrix for the collaboration game\npayoff('Independently', 'Independently', 3, 3).\npayoff('Collaborate', 'Independently', 0, 5).\npayoff('Independently', 'Collaborate', 5, 0).\npayoff('Collaborate', 'Collaborate', 8, 8).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(r1), s0).\ninitially(player(r2), s0).\ninitially(role(r1, researcher1), s0).\ninitially(role(r2, researcher2), s0).\ninitially(control(r1), s0).\ninitially(control(r2), s0).\ninitially(default_move(_, 'Independently'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_R2, _M2), do(move(_R1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(R, M), S):- possible(move(R, M), S), holds(control(R), S).\n\n% What is possible for a player to choose\npossible(move(R,'Collaborate'), S):- holds(player(R), S).\npossible(move(R,'Independently'), S):- holds(player(R), S).\n\n% Moves that are opposite to each other.\nopposite_move('Collaborate', 'Independently').\nopposite_move('Independently', 'Collaborate').\n\n% The effects of a move: if R has chosen M, then in the next state this\n% is what they did.\neffect(did(R, M), move(R, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(R), move(R, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(R1, M1, U1, R2, M2, U2), S):-\n    final(S),\n    holds(role(R1, researcher1), S),\n    holds(did(R1, M1), S),\n    holds(role(R2, researcher2), S),\n    holds(did(R2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(R1, U1), S):-\n    finally(outcome(R1, _, U1, _, _, _), S).\nfinally(goal(R2, U2), S):-\n    finally(outcome(_, _, _, R2, _, U2), S).\n",
    "game_moves": [
        "Collaborate",
        "Independently"
    ],
    "game_players": [
        "r1",
        "r2"
    ],
    "default_move": "Independently",
    "moves": [
        "Independently",
        "Independently",
        "Collaborate",
        "Collaborate"
    ],
    "payoffs": [
        3.0,
        5.0,
        8.0,
        0.0
    ],
    "total_payoff": 16.0,
    "trace_messages": [],
    "attempts": 1
}