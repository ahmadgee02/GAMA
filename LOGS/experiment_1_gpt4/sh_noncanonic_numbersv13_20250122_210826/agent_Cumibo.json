{
    "name": "Cumibo",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n% Begin Prolog code\n\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous payoff/4.\n\n% Game specific predicates for the Allied Generals' Game\n\n% Payoff matrix for Generals' Game\npayoff('attack', 'attack', 9, 9).\npayoff('attack', 'hesitate', 0, 4).\npayoff('hesitate', 'attack', 4, 0).\npayoff('hesitate', 'hesitate', 2, 2).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(g1), s0).\ninitially(player(g2), s0).\ninitially(role(g1, first), s0).\ninitially(role(g2, second), s0).\ninitially(control(g1), s0).\ninitially(control(g2), s0).\ninitially(default_move(_, 'hesitate'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_G2, _M2), do(move(_G1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is their turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P,'attack'), S):- holds(player(P), S).\npossible(move(P,'hesitate'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('attack', 'hesitate').\nopposite_move('hesitate', 'attack').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control,\n% i.e., cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(G1, M1, U1, G2, M2, U2), S):-\n    final(S),\n    holds(role(G1, first), S),\n    holds(did(G1, M1), S),\n    holds(role(G2, second), S),\n    holds(did(G2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(G1, U1), S):-\n    finally(outcome(G1, _, U1, _, _, _), S).\nfinally(goal(G2, U2), S):-\n    finally(outcome(_, _, _, G2, _, U2), S).\n\n% End Prolog code\n",
    "game_moves": [
        "hesitate",
        "attack"
    ],
    "game_players": [
        "g1",
        "g2"
    ],
    "default_move": "hesitate",
    "moves": [
        "hesitate",
        "hesitate",
        "attack",
        "attack"
    ],
    "payoffs": [
        2.0,
        4.0,
        9.0,
        0.0
    ],
    "total_payoff": 15.0,
    "trace_messages": [],
    "attempts": 1
}