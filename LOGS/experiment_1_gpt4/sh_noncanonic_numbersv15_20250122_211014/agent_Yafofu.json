{
    "name": "Yafofu",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the Tech Companies game\npayoff('Commit', 'Commit', 10, 10).\npayoff('Commit', 'Pull_Back', 0, 5).\npayoff('Pull_Back', 'Commit', 5, 0).\npayoff('Pull_Back', 'Pull_Back', 4, 4).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(company1), s0).\ninitially(player(company2), s0).\ninitially(role(company1, partner1), s0).\ninitially(role(company2, partner2), s0).\ninitially(control(company1), s0).\ninitially(control(company2), s0).\ninitially(default_move(_, 'Pull_Back'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P,'Commit'), S):- holds(player(P), S).\npossible(move(P,'Pull_Back'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Commit', 'Pull_Back').\nopposite_move('Pull_Back', 'Commit').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1,M1,U1,P2,M2,U2), S):-\n    final(S),\n    holds(role(P1, partner1), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, partner2), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1,_,U1,_,_,_), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_,_,_,P2,_,U2), S).\n",
    "game_moves": [
        "Commit",
        "Pull_Back"
    ],
    "game_players": [
        "company1",
        "company2"
    ],
    "default_move": "Pull_Back",
    "moves": [
        "Pull_Back",
        "Pull_Back",
        "Commit",
        "Commit"
    ],
    "payoffs": [
        4.0,
        5.0,
        10.0,
        0.0
    ],
    "total_payoff": 19.0,
    "trace_messages": [],
    "attempts": 1
}