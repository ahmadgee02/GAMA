{
    "name": "Yihado",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n/* Domain specific predicates for the Film Directors' Dilemma (FDD) */\n\n/* Discontiguous declaration for SWI Prolog */\n:- discontiguous player/2.\n:- discontiguous role/2.\n:- discontiguous control/2.\n\n/* Payoff matrix for FDD */\npayoff('Commit', 'Commit', 7, 7).\npayoff('Commit', 'Disengage', 0, 3).\npayoff('Disengage', 'Commit', 3, 0).\npayoff('Disengage', 'Disengage', 2, 2).\n\n/* Initial state */\ninitial(s0).\n\n/* What holds initially: who is a player, their role, and whether they can play. */\ninitially(player(director1), s0).\ninitially(player(director2), s0).\ninitially(role(director1, row), s0).\ninitially(role(director2, col), s0).\ninitially(control(director1), s0).\ninitially(control(director2), s0).\ninitially(default_move(_, 'Commit'), s0).\n\n/* When a state is final */\nfinal(do(move(_D2, _M2), do(move(_D1, _M1), S))) :- initial(S).\n\n/* Legal move is a possible move where the player has control (it's their turn). */\nlegal(move(D, M), S) :- possible(move(D, M), S), holds(control(D), S).\n\n/* What is possible for a director to choose */\npossible(move(D, 'Commit'), S) :- holds(player(D), S).\npossible(move(D, 'Disengage'), S) :- holds(player(D), S).\n\n/* Moves that are opposite to each other */\nopposite_move('Commit', 'Disengage').\nopposite_move('Disengage', 'Commit').\n\n/* The effects of a move: if D has chosen M, then in the next state this is what they did. */\neffect(did(D, M), move(D, M), _S).\n\n/* The effects of a move: once a move is made, the director loses control, i.e., cannot move anymore. */\nabnormal(control(D), move(D, _M), _S).\n\n/* What holds finally: the outcome with players, Moves, and Utilities. */\nfinally(outcome(D1, M1, U1, D2, M2, U2), S) :-\n    final(S),\n    holds(role(D1, row), S),\n    holds(did(D1, M1), S),\n    holds(role(D2, col), S),\n    holds(did(D2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n/* Goals achieved by the directors. */\nfinally(goal(D1, U1), S) :-\n    finally(outcome(D1, _, U1, _, _, _), S).\nfinally(goal(D2, U2), S) :-\n    finally(outcome(_, _, _, D2, _, U2), S).\n",
    "game_moves": [
        "Commit",
        "Disengage"
    ],
    "game_players": [
        "director1",
        "director2"
    ],
    "default_move": "Commit",
    "moves": [
        "Commit",
        "Commit",
        "Disengage",
        "Disengage"
    ],
    "payoffs": [
        7.0,
        0.0,
        2.0,
        3.0
    ],
    "total_payoff": 12.0,
    "trace_messages": [],
    "attempts": 1
}