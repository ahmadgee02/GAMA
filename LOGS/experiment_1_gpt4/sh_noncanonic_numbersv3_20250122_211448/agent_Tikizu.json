{
    "name": "Tikizu",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n\n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous final/1.\n:- discontiguous finally/2.\n\n% Domain-specific predicates for Strategic Alliance Game\n\n% Payoff matrix for the Strategic Alliance Game\npayoff('solo', 'solo', 2, 2).\npayoff('alliance', 'solo', 0, 3).\npayoff('solo', 'alliance', 3, 0).\npayoff('alliance', 'alliance', 5, 5).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their roles, and who can play.\ninitially(player(company1), s0).\ninitially(player(company2), s0).\ninitially(role(company1, row), s0).\ninitially(role(company2, col), s0).\ninitially(control(company1), s0).\ninitially(control(company2), s0).\n\n% Default move for flexibility, though not utilized in this game.\ninitially(default_move(_, 'solo'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_Company2, _M2), do(move(_Company1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(Company, Move), S):- possible(move(Company, Move), S), holds(control(Company), S).\n\n% What is possible for a company to choose\npossible(move(Company, 'solo'), S):- holds(player(Company), S).\npossible(move(Company, 'alliance'), S):- holds(player(Company), S).\n\n% Moves that are opposite to each other.\nopposite_move('solo', 'alliance').\nopposite_move('alliance', 'solo').\n\n% The effects of a move: if a company has chosen a move, then in the next state\n% this is what they did.\neffect(did(Company, Move), move(Company, Move), _S).\n\n% The effects of a move: once a move is made, the company loses control, i.e.,\n% cannot move anymore.\nabnormal(control(Company), move(Company, _Move), _S).\n\n% What holds finally: the outcome with companies, Moves, and Utilities.\nfinally(outcome(C1, M1, U1, C2, M2, U2), S):-\n    final(S),\n    holds(role(C1, row), S),\n    holds(did(C1, M1), S),\n    holds(role(C2, col), S),\n    holds(did(C2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the companies.\nfinally(goal(C1, U1), S):-\n    finally(outcome(C1, _, U1, _, _, _), S).\nfinally(goal(C2, U2), S):-\n    finally(outcome(_, _, _, C2, _, U2), S).\n\n",
    "game_moves": [
        "alliance",
        "solo"
    ],
    "game_players": [
        "company1",
        "company2"
    ],
    "default_move": "solo",
    "moves": [
        "solo",
        "solo",
        "alliance",
        "alliance"
    ],
    "payoffs": [
        2.0,
        3.0,
        5.0,
        0.0
    ],
    "total_payoff": 10.0,
    "trace_messages": [],
    "attempts": 1
}