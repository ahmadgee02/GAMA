{
    "name": "Piqiru",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous outcome/6.\n\n/* Game specific predicates for the Mutual Defense Pact Game */\n\n% Payoff matrix for mutual defense pact\npayoff('Sign', 'Sign', 4, 4).\npayoff('Sign', 'DontSign', 0, 2).\npayoff('DontSign', 'Sign', 2, 0).\npayoff('DontSign', 'DontSign', 1, 1).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(nation1), s0).\ninitially(player(nation2), s0).\ninitially(role(nation1, row), s0).\ninitially(role(nation2, col), s0).\ninitially(control(nation1), s0).\ninitially(control(nation2), s0).\ninitially(default_move(_, 'DontSign'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_Nation2, _M2), do(move(_Nation1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(Nation, M), S) :- possible(move(Nation, M), S), holds(control(Nation), S).\n\n% What is possible for a player to choose\npossible(move(Nation, 'Sign'), S) :- holds(player(Nation), S).\npossible(move(Nation, 'DontSign'), S) :- holds(player(Nation), S).\n\n% Moves that are opposite to each other.\nopposite_move('Sign', 'DontSign').\nopposite_move('DontSign', 'Sign').\n\n% The effects of a move: if Nation has chosen M, then in the next state this\n% is what they did.\neffect(did(Nation, M), move(Nation, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(Nation), move(Nation, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(N1, M1, U1, N2, M2, U2), S) :-\n    final(S),\n    holds(role(N1, row), S),\n    holds(did(N1, M1), S),\n    holds(role(N2, col), S),\n    holds(did(N2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(N1, U1), S) :-\n    finally(outcome(N1, _, U1, _, _, _), S).\nfinally(goal(N2, U2), S) :-\n    finally(outcome(_, _, _, N2, _, U2), S).\n",
    "game_moves": [
        "DontSign",
        "Sign"
    ],
    "game_players": [
        "nation1",
        "nation2"
    ],
    "default_move": "DontSign",
    "moves": [
        "DontSign",
        "DontSign",
        "Sign",
        "Sign"
    ],
    "payoffs": [
        1.0,
        2.0,
        4.0,
        0.0
    ],
    "total_payoff": 7.0,
    "trace_messages": [
        "Line: payoff('Sign', 'Don't Sign', 0, 2). produced Error: Syntax error: Operator expected\nLine: payoff('Don't Sign', 'Don't Sign', 1, 1). produced Error: Syntax error: Operator expected\nLine: initially(default_move(_, 'Don't Sign'), s0). produced Error: Syntax error: Operator expected\nLine: opposite_move('Sign', 'Don't Sign'). produced Error: Syntax error: Operator expected\n"
    ],
    "attempts": 2
}