{
    "name": "Wekuze",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n% Domain-specific axioms for the Community Garden Game\n\n% Declaring discontiguous predicates\n:- discontiguous payoff/6.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for Community Garden Game\npayoff('Slacker', 'Slacker', -1, -1).\npayoff('Worker', 'Slacker', 0, 3).\npayoff('Slacker', 'Worker', 3, 0).\npayoff('Worker', 'Worker', 6, 6).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: defining players, their roles, and capabilities\ninitially(player(n1), s0).\ninitially(player(n2), s0).\ninitially(role(n1, neighbor1), s0).\ninitially(role(n2, neighbor2), s0).\ninitially(control(n1), s0).\ninitially(control(n2), s0).\ninitially(default_move(_, 'Slacker'), s0).\n\n% When a state is final: based on legality generated by game/2\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% A legal move is defined for a player with control\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% Possible moves for the players\npossible(move(P, 'Worker'), S) :- holds(player(P), S).\npossible(move(P, 'Slacker'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other\nopposite_move('Worker', 'Slacker').\nopposite_move('Slacker', 'Worker').\n\n% The effects of a move\neffect(did(P, M), move(P, M), _S).\n\n% A player loses control after making a move\nabnormal(control(P), move(P, _M), _S).\n\n% Final outcomes with players, moves, and utilities\nfinally(outcome(P1, M1, U1, P2, M2, U2), S) :-\n    final(S),\n    holds(role(P1, neighbor1), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, neighbor2), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by players\nfinally(goal(P1, U1), S) :- finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S) :- finally(outcome(_, _, _, P2, _, U2), S).\n",
    "game_moves": [
        "Worker",
        "Slacker"
    ],
    "game_players": [
        "n1",
        "n2"
    ],
    "default_move": "Slacker",
    "moves": [
        "Slacker",
        "Slacker",
        "Worker",
        "Worker"
    ],
    "payoffs": [
        -1.0,
        3.0,
        6.0,
        0.0
    ],
    "total_payoff": 8.0,
    "trace_messages": [],
    "attempts": 2
}