{
    "name": "Woreke",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n:- discontiguous payoff/6.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the community garden game\npayoff('contribute', 'contribute', 6, 6).\npayoff('contribute', 'slack', 0, 3).\npayoff('slack', 'contribute', 3, 0).\npayoff('slack', 'slack', 1, 1).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(n1), s0).\ninitially(player(n2), s0).\ninitially(role(n1, row), s0).\ninitially(role(n2, col), s0).\ninitially(control(n1), s0).\ninitially(control(n2), s0).\ninitially(default_move(_, 'contribute'), s0).\n\n% Final state: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_N2, _M2), do(move(_N1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(N, M), S):- possible(move(N, M), S), holds(control(N), S).\n\n% What is possible for a player to choose\npossible(move(N, 'contribute'), S):- holds(player(N), S).\npossible(move(N, 'slack'), S):- holds(player(N), S).\n\n% Moves that are opposite to each other.\nopposite_move('contribute', 'slack').\nopposite_move('slack', 'contribute').\n\n% The effects of a move: if N has chosen M, then in the next state this\n% is what they did.\neffect(did(N, M), move(N, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(N), move(N, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(N1, M1, U1, N2, M2, U2), S):-\n    final(S),\n    holds(role(N1, row), S),\n    holds(did(N1, M1), S),\n    holds(role(N2, col), S),\n    holds(did(N2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(N1, U1), S):-\n    finally(outcome(N1, _, U1, _, _, _), S).\nfinally(goal(N2, U2), S):-\n    finally(outcome(_, _, _, N2, _, U2), S).\n",
    "game_moves": [
        "slack",
        "contribute"
    ],
    "game_players": [
        "n1",
        "n2"
    ],
    "default_move": "contribute",
    "moves": [
        "contribute",
        "contribute",
        "slack",
        "slack"
    ],
    "payoffs": [
        6.0,
        0.0,
        1.0,
        3.0
    ],
    "total_payoff": 10.0,
    "trace_messages": [],
    "attempts": 1
}