{
    "name": "Qixoki",
    "strategy_name": "tit-for-tat.",
    "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
    "status": "correct",
    "game_rules": "\n:- discontiguous initially/2.\n:- discontiguous payoff/4.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n\n/* Game specific predicates for Cooking Show Game */\n\n% Payoff matrix for Cooking Show Game\npayoff('collaborate', 'collaborate', 3, 3).\npayoff('collaborate', 'independent', 0, 2).\npayoff('independent', 'collaborate', 2, 0).\npayoff('independent', 'independent', 1, 1).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(chef1), s0).\ninitially(player(chef2), s0).\ninitially(role(chef1, row), s0).\ninitially(role(chef2, col), s0).\ninitially(control(chef1), s0).\ninitially(control(chef2), s0).\ninitially(default_move(_, 'independent'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_C2, _M2), do(move(_C1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(C, M), S):- possible(move(C, M), S), holds(control(C), S).\n\n% What is possible for a player to choose\npossible(move(Chef, 'collaborate'), S):- holds(player(Chef), S).\npossible(move(Chef, 'independent'), S):- holds(player(Chef), S).\n\n% Moves that are opposite to each other.\nopposite_move('collaborate', 'independent').\nopposite_move('independent', 'collaborate').\n\n% The effects of a move: if Chef has chosen M, then in the next state this\n% is what they did.\neffect(did(Chef, M), move(Chef, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(Chef), move(Chef, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(C1, M1, U1, C2, M2, U2), S):-\n    final(S),\n    holds(role(C1, row), S),\n    holds(did(C1, M1), S),\n    holds(role(C2, col), S),\n    holds(did(C2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(C1, U1), S):-\n    finally(outcome(C1, _, U1, _, _, _), S).\nfinally(goal(C2, U2), S):-\n    finally(outcome(_, _, _, C2, _, U2), S).\n",
    "game_moves": [
        "collaborate",
        "independent"
    ],
    "game_players": [
        "chef1",
        "chef2"
    ],
    "default_move": "independent",
    "moves": [
        "independent",
        "independent",
        "collaborate",
        "collaborate"
    ],
    "payoffs": [
        1.0,
        2.0,
        3.0,
        0.0
    ],
    "total_payoff": 6.0,
    "trace_messages": [],
    "attempts": 1
}