{
  "name": "Bozuya",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n\n:- discontiguous holds/2.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous payoff/4.\n:- discontiguous finally/2.\n\n/* Game specific predicates for the Music Event Decision Game */\n\n% Payoff matrix for the Music Event Decision Game\npayoff('rock', 'rock', 3, 1).\npayoff('jazz', 'jazz', 1, 3).\npayoff('rock', 'jazz', 0, 0).\npayoff('jazz', 'rock', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(friend1), s0).\ninitially(player(friend2), s0).\ninitially(role(friend1, rock_fan), s0).\ninitially(role(friend2, jazz_fan), s0).\ninitially(control(friend1), s0).\ninitially(control(friend2), s0).\ninitially(default_move(_, 'rock'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_F2, _M2), do(move(_F1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(F, M), S):- possible(move(F, M), S), holds(control(F), S).\n\n% What is possible for a player to choose\npossible(move(F,'rock'), S):- holds(player(F), S).\npossible(move(F,'jazz'), S):- holds(player(F), S).\n\n% Moves that are opposite to each other.\nopposite_move('rock', 'jazz').\nopposite_move('jazz', 'rock').\n\n% The effects of a move: if F has chosen M, then in the next state this\n% is what they did.\neffect(did(F, M), move(F, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(F), move(F, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(F1,M1,U1,F2,M2,U2), S):-\n    final(S),\n    holds(role(F1, rock_fan), S),\n    holds(did(F1, M1), S),\n    holds(role(F2, jazz_fan), S),\n    holds(did(F2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(F1, U1), S):-\n    finally(outcome(F1,_,U1,_,_,_), S).\nfinally(goal(F2, U2), S):-\n    finally(outcome(_,_,_,F2,_,U2), S).\n\n",
  "game_moves": [
    "rock",
    "jazz"
  ],
  "game_players": [
    "friend1",
    "friend2"
  ],
  "default_move": "rock",
  "moves": [
    "rock",
    "rock",
    "jazz",
    "jazz"
  ],
  "payoffs": [
    3.0,
    0.0,
    1.0,
    0.0
  ],
  "total_payoff": 4.0,
  "trace_messages": [],
  "attempts": 1
}