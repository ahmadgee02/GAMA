{
  "name": "Mikumo",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n\n:- discontiguous payoff/6.\n:- discontiguous initially/2.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous holds/2.\n\n% Payoff matrix for the Music Concert Game\n% payoff(Move1, Move2, Payoff for Player1, Payoff for Player2)\npayoff('rock', 'rock', 3, 1).   % Rock fan is happy\npayoff('jazz', 'jazz', 1, 3).   % Jazz fan is happy\npayoff('rock', 'jazz', 0, 0).   % Different choices, no payoff\npayoff('jazz', 'rock', 0, 0).   % Different choices, no payoff\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(rock_fan), s0).\ninitially(player(jazz_fan), s0).\ninitially(role(rock_fan, fan), s0).\ninitially(role(jazz_fan, fan), s0).\ninitially(control(rock_fan), s0).\ninitially(control(jazz_fan), s0).\ninitially(default_move(_, 'rock'), s0).\n\n% When a state is final: Uses the definition from the framework above\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is their turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'rock'), S) :- holds(player(P), S).\npossible(move(P, 'jazz'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other (for illustration, though not necessary)\nopposite_move('rock', 'jazz').\nopposite_move('jazz', 'rock').\n\n% The effects of a move: if P has chosen M, then in the next state this is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e. cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, moves, and utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S) :-\n    final(S),\n    holds(role(P1, fan), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, fan), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S) :-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S) :-\n    finally(outcome(_, _, _, P2, _, U2), S).\n\n",
  "game_moves": [
    "rock",
    "jazz"
  ],
  "game_players": [
    "rock_fan",
    "jazz_fan"
  ],
  "default_move": "rock",
  "moves": [
    "rock",
    "rock",
    "jazz",
    "jazz"
  ],
  "payoffs": [
    3.0,
    3.0,
    1.0,
    1.0
  ],
  "total_payoff": 8.0,
  "trace_messages": [],
  "attempts": 1
}