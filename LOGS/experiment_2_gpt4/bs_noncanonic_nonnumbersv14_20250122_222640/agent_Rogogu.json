{
  "name": "Rogogu",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": " \n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n\n% Payoff matrix for the music event game\npayoff('Rock', 'Rock', 4, 2). % Rock fan gets 4, Jazz fan gets 2\npayoff('Jazz', 'Jazz', 2, 4). % Jazz fan gets 2, Rock fan gets 4\npayoff('Rock', 'Jazz', 0, 0). % If they go to different events, no payoff\npayoff('Jazz', 'Rock', 0, 0). \n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(f1), s0). % Friend 1\ninitially(player(f2), s0). % Friend 2\ninitially(role(f1, rock_fan), s0). % Friend 1 prefers rock\ninitially(role(f2, jazz_fan), s0). % Friend 2 prefers jazz\ninitially(control(f1), s0). % Initially, friend 1 can play\ninitially(control(f2), s0). % Initially, friend 2 can play\ninitially(default_move(_, 'Rock'), s0). % Default move can be \"Rock\" but is not used in this setup\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_F2, _M2), do(move(_F1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Rock'), S):- holds(player(P), S).\npossible(move(P, 'Jazz'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Rock', 'Jazz').\nopposite_move('Jazz', 'Rock').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(F1, M1, U1, F2, M2, U2), S):-\n    final(S),\n    holds(role(F1, rock_fan), S),\n    holds(did(F1, M1), S),\n    holds(role(F2, jazz_fan), S),\n    holds(did(F2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(F1, U1), S):-\n    finally(outcome(F1, _, U1, _, _, _), S).\nfinally(goal(F2, U2), S):-\n    finally(outcome(_,_,_,F2,_,U2), S).\n",
  "game_moves": [
    "Rock",
    "Jazz"
  ],
  "game_players": [
    "f1",
    "f2"
  ],
  "default_move": "Rock",
  "moves": [
    "Rock",
    "Rock",
    "Jazz",
    "Jazz"
  ],
  "payoffs": [
    4.0,
    0.0,
    2.0,
    0.0
  ],
  "total_payoff": 6.0,
  "trace_messages": [],
  "attempts": 1
}