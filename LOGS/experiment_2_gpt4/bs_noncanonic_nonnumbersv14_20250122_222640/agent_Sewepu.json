{
  "name": "Sewepu",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n\n:- discontiguous payoff/4.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the music event game\npayoff('rock', 'rock', 3, 1). % Rock fan gets 3, Jazz fan gets 1\npayoff('jazz', 'jazz', 1, 3). % Jazz fan gets 3, Rock fan gets 1\npayoff('rock', 'jazz', 0, 0). % No payoff if they attend different events\npayoff('jazz', 'rock', 0, 0). % No payoff if they attend different events\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who are players, their roles, and whether they can play.\ninitially(player(f1), s0). % Friend 1\ninitially(player(f2), s0). % Friend 2\ninitially(role(f1, rock_fan), s0). % Friend 1 prefers rock\ninitially(role(f2, jazz_fan), s0). % Friend 2 prefers jazz\ninitially(control(f1), s0).\ninitially(control(f2), s0).\ninitially(default_move(_, 'rock'), s0).\n\n% Final state description\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P,'rock'), S):- holds(player(P), S).\npossible(move(P,'jazz'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('rock', 'jazz').\nopposite_move('jazz', 'rock').\n\n% The effects of a move: if P has chosen M, then in the next state this is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e., cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(F1, M1, U1, F2, M2, U2), S):-\n    final(S),\n    holds(role(F1, rock_fan), S),\n    holds(did(F1, M1), S),\n    holds(role(F2, jazz_fan), S),\n    holds(did(F2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(F1, U1), S):-\n    finally(outcome(F1, _, U1, _, _, _), S).\nfinally(goal(F2, U2), S):-\n    finally(outcome(_, _, _, F2, _, U2), S).\n\n",
  "game_moves": [
    "rock",
    "jazz"
  ],
  "game_players": [
    "f1",
    "f2"
  ],
  "default_move": "rock",
  "moves": [
    "rock",
    "rock",
    "jazz",
    "jazz"
  ],
  "payoffs": [
    3.0,
    0.0,
    1.0,
    0.0
  ],
  "total_payoff": 4.0,
  "trace_messages": [],
  "attempts": 1
}