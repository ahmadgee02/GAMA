{
  "name": "Meliyu",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "runtime_error",
  "game_rules": "\n\n% Declare discontiguous predicates\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous payoff/4.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous finally/2.\n\n% Game specific predicates for the Co-Authoring Book game\n\n% Payoff matrix for the Co-Authoring Book game\npayoff('Fantasy', 'Fantasy', 3, 1).\npayoff('Historical_Fiction', 'Historical_Fiction', 1, 3).\npayoff('Fantasy', 'Historical_Fiction', 0, 0).\npayoff('Historical_Fiction', 'Fantasy', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(author1), s0).\ninitially(player(author2), s0).\ninitially(role(author1, fantasy_enthusiast), s0).\ninitially(role(author2, historical_enthusiast), s0).\ninitially(control(author1), s0).\ninitially(control(author2), s0).\n\n% Default move for the players if applicable, though not explicitly mentioned in the description\ninitially(default_move(_, 'Fantasy'), s0).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Fantasy'), S):- holds(player(P), S).\npossible(move(P, 'Historical_Fiction'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Fantasy', 'Historical_Fiction').\nopposite_move('Historical_Fiction', 'Fantasy').\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, fantasy_enthusiast), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, historical_enthusiast), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_, _, _, P2, _, U2), S).\n\n",
  "game_moves": [
    "Historical_Fiction",
    "Fantasy"
  ],
  "game_players": [
    "author1",
    "author2"
  ],
  "default_move": "Fantasy",
  "moves": [
    "Fantasy"
  ],
  "payoffs": [],
  "total_payoff": 0,
  "trace_messages": [],
  "attempts": 1
}