{
  "name": "Qoxoju",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for the Co-authoring Book Game\n\n% Payoff matrix for the Co-authoring Book Game\npayoff('fantasy', 'fantasy', 4, 2).\npayoff('historical', 'historical', 2, 4).\npayoff('fantasy', 'historical', 0, 0).\npayoff('historical', 'fantasy', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(author1), s0).\ninitially(player(author2), s0).\ninitially(role(author1, fantasy_enthusiast), s0).\ninitially(role(author2, historical_enthusiast), s0).\ninitially(control(author1), s0).\ninitially(control(author2), s0).\ninitially(default_move(_, 'fantasy'), s0).\n\n% When a state is final: generated by game/2, implying it is a legal state.\nfinal(do(move(_A2, _M2), do(move(_A1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(A, M), S) :- possible(move(A, M), S), holds(control(A), S).\n\n% What is possible for a player to choose\npossible(move(A, 'fantasy'), S) :- holds(player(A), S).\npossible(move(A, 'historical'), S) :- holds(player(A), S).\n\n% Moves that are opposite to each other.\nopposite_move('fantasy', 'historical').\nopposite_move('historical', 'fantasy').\n\n% The effects of a move: if A has chosen M, then in the next state this\n% is what they did.\neffect(did(A, M), move(A, M), _S).\n\n% The effect of a move: once a move is made, the player loses control.\nabnormal(control(A), move(A, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(A1, M1, U1, A2, M2, U2), S) :-\n    final(S),\n    holds(role(A1, fantasy_enthusiast), S),\n    holds(did(A1, M1), S),\n    holds(role(A2, historical_enthusiast), S),\n    holds(did(A2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(A1, U1), S) :-\n    finally(outcome(A1, _, U1, _, _, _), S).\nfinally(goal(A2, U2), S) :-\n    finally(outcome(_, _, _, A2, _, U2), S).\n",
  "game_moves": [
    "fantasy",
    "historical"
  ],
  "game_players": [
    "author1",
    "author2"
  ],
  "default_move": "fantasy",
  "moves": [
    "fantasy",
    "fantasy",
    "historical",
    "historical"
  ],
  "payoffs": [
    4.0,
    0.0,
    2.0,
    0.0
  ],
  "total_payoff": 6.0,
  "trace_messages": [],
  "attempts": 1
}