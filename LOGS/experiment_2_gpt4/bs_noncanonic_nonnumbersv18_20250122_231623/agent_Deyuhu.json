{
  "name": "Deyuhu",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the Tech Startups Game\npayoff('AI', 'AI', 5, 3).\npayoff('Blockchain', 'Blockchain', 3, 5).\npayoff('AI', 'Blockchain', 0, 0).\npayoff('Blockchain', 'AI', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(startup1), s0).\ninitially(player(startup2), s0).\ninitially(role(startup1, ai_proponent), s0).\ninitially(role(startup2, blockchain_proponent), s0).\ninitially(control(startup1), s0).\ninitially(control(startup2), s0).\ninitially(default_move(_, 'AI'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_Startup2, _M2), do(move(_Startup1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(Startup, M), S):- possible(move(Startup, M), S), holds(control(Startup), S).\n\n% What is possible for a player to choose\npossible(move(Startup,'AI'), S):- holds(player(Startup), S).\npossible(move(Startup,'Blockchain'), S):- holds(player(Startup), S).\n\n% Moves that are opposite to each other.\nopposite_move('AI', 'Blockchain').\nopposite_move('Blockchain', 'AI').\n\n% The effects of a move: if a startup has chosen a project, then in the next state this\n% is what they did.\neffect(did(Startup, M), move(Startup, M), _S).\n\n% The effects of a move: once a move is made, the startup loses control, i.e.\n% cannot move anymore.\nabnormal(control(Startup), move(Startup, _M), _S).\n\n% What holds finally: the outcome with startups, Moves, and Utilities.\nfinally(outcome(S1, M1, U1, S2, M2, U2), S):-\n    final(S),\n    holds(role(S1, ai_proponent), S),\n    holds(did(S1, M1), S),\n    holds(role(S2, blockchain_proponent), S),\n    holds(did(S2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the startups.\nfinally(goal(S1, U1), S):-\n    finally(outcome(S1,_,U1,_,_,_), S).\nfinally(goal(S2, U2), S):-\n    finally(outcome(_,_,_,S2,_,U2), S).\n",
  "game_moves": [
    "Blockchain",
    "AI"
  ],
  "game_players": [
    "startup1",
    "startup2"
  ],
  "default_move": "AI",
  "moves": [
    "AI",
    "AI",
    "Blockchain",
    "Blockchain"
  ],
  "payoffs": [
    5.0,
    0.0,
    3.0,
    0.0
  ],
  "total_payoff": 8.0,
  "trace_messages": [],
  "attempts": 1
}