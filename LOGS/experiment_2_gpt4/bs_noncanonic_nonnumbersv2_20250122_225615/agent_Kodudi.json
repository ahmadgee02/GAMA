{
  "name": "Kodudi",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous payoff/4.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n:- discontiguous holds/2.\n\n% Payoff matrix for the executives' conference game\npayoff('Tech', 'Tech', 4, 2).   % Tech enthusiast gets higher payoff\npayoff('Market', 'Market', 2, 4). % Market enthusiast gets higher payoff\npayoff('Tech', 'Market', 0, 0).  % Different choices, no payoff\npayoff('Market', 'Tech', 0, 0).  % Different choices, no payoff\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(exec1), s0).\ninitially(player(exec2), s0).\ninitially(role(exec1, tech_enthusiast), s0).\ninitially(role(exec2, market_enthusiast), s0).\ninitially(control(exec1), s0).\ninitially(control(exec2), s0).\ninitially(default_move(_, 'Tech'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_E2, _M2), do(move(_E1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(E, M), S):- possible(move(E, M), S), holds(control(E), S).\n\n% What is possible for a player to choose\npossible(move(E, 'Tech'), S):- holds(player(E), S).\npossible(move(E, 'Market'), S):- holds(player(E), S).\n\n% Moves that are opposite to each other.\nopposite_move('Tech', 'Market').\nopposite_move('Market', 'Tech').\n\n% The effects of a move: if E has chosen M, then in the next state this\n% is what they did.\neffect(did(E, M), move(E, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(E), move(E, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(E1, M1, U1, E2, M2, U2), S):-\n    final(S),\n    holds(role(E1, tech_enthusiast), S),\n    holds(did(E1, M1), S),\n    holds(role(E2, market_enthusiast), S),\n    holds(did(E2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(E1, U1), S):-\n    finally(outcome(E1, _, U1, _, _, _), S).\nfinally(goal(E2, U2), S):-\n    finally(outcome(_, _, _, E2, _, U2), S).\n",
  "game_moves": [
    "Market",
    "Tech"
  ],
  "game_players": [
    "exec1",
    "exec2"
  ],
  "default_move": "Tech",
  "moves": [
    "Tech",
    "Tech",
    "Market",
    "Market"
  ],
  "payoffs": [
    4.0,
    0.0,
    2.0,
    0.0
  ],
  "total_payoff": 6.0,
  "trace_messages": [],
  "attempts": 1
}