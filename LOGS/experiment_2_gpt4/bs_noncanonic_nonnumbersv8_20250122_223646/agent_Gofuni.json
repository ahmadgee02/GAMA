{
  "name": "Gofuni",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": " \n:- discontiguous initially/2.\n:- discontiguous payoff/4.\n:- discontiguous possible/2.\n\n% Game specific predicates for the Generals' Coordination Game\n\n% Payoff matrix for the Generals' Game\npayoff('N', 'N', 4, 2).  % Both choose Northern, Northern advocate gets higher payoff\npayoff('E', 'E', 2, 4).  % Both choose Eastern, Eastern advocate gets higher payoff\npayoff('N', 'E', 0, 0).  % Choose different, no payoff\npayoff('E', 'N', 0, 0).  % Choose different, no payoff\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(general1), s0).\ninitially(player(general2), s0).\ninitially(role(general1, north_advocate), s0).\ninitially(role(general2, east_advocate), s0).\ninitially(control(general1), s0).\ninitially(control(general2), s0).\ninitially(default_move(_, 'N'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_G2, _M2), do(move(_G1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(G, M), S):- possible(move(G, M), S), holds(control(G), S).\n\n% What is possible for a player to choose\npossible(move(G,'N'), S):- holds(player(G), S).\npossible(move(G,'E'), S):- holds(player(G), S).\n\n% Moves that are opposite to each other.\nopposite_move('N', 'E').\nopposite_move('E', 'N').\n\n% The effects of a move: if G has chosen M, then in the next state this\n% is what they did.\neffect(did(G, M), move(G, M), _S).\n\n% The effects of a move: once a move is made, the player loses control,\n% i.e., cannot move anymore.\nabnormal(control(G), move(G, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(G1, M1, U1, G2, M2, U2), S):-\n    final(S),\n    holds(role(G1, north_advocate), S),\n    holds(did(G1, M1), S),\n    holds(role(G2, east_advocate), S),\n    holds(did(G2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(G1, U1), S):-\n    finally(outcome(G1, _, U1, _, _, _), S).\nfinally(goal(G2, U2), S):-\n    finally(outcome(_, _, _, G2, _, U2), S).\n",
  "game_moves": [
    "E",
    "N"
  ],
  "game_players": [
    "general1",
    "general2"
  ],
  "default_move": "N",
  "moves": [
    "N",
    "N",
    "E",
    "E"
  ],
  "payoffs": [
    4.0,
    0.0,
    2.0,
    0.0
  ],
  "total_payoff": 6.0,
  "trace_messages": [],
  "attempts": 1
}