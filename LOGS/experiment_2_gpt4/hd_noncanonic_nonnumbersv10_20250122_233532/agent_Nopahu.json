{
  "name": "Nopahu",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous player/2.\n:- discontiguous role/2.\n:- discontiguous control/2.\n:- discontiguous possible/3.\n:- discontiguous payoff/4.\n:- discontiguous opposite_move/2.\n:- discontiguous initially/2.\n\n% Payoff matrix for Vendor-Retailer Negotiation\npayoff('Firm', 'Firm', 0, 0).\npayoff('Compromise', 'Firm', 1, 2).\npayoff('Firm', 'Compromise', 2, 1).\npayoff('Compromise', 'Compromise', 3, 3).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(vendor), s0).\ninitially(player(retailer), s0).\ninitially(role(vendor, proposer), s0).\ninitially(role(retailer, responder), s0).\ninitially(control(vendor), s0).\ninitially(control(retailer), s0).\ninitially(default_move(_, 'Compromise'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Firm'), S) :- holds(player(P), S).\npossible(move(P, 'Compromise'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Firm', 'Compromise').\nopposite_move('Compromise', 'Firm').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S) :-\n    final(S),\n    holds(role(P1, proposer), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, responder), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S) :-\n    finally(outcome(P1, _, U1, _, _, _), S).\n\nfinally(goal(P2, U2), S) :-\n    finally(outcome(_, _, _, P2, _, U2), S).\n",
  "game_moves": [
    "Firm",
    "Compromise"
  ],
  "game_players": [
    "vendor",
    "retailer"
  ],
  "default_move": "Compromise",
  "moves": [
    "Compromise",
    "Compromise",
    "Firm",
    "Firm"
  ],
  "payoffs": [
    3.0,
    1.0,
    0.0,
    2.0
  ],
  "total_payoff": 6.0,
  "trace_messages": [],
  "attempts": 1
}