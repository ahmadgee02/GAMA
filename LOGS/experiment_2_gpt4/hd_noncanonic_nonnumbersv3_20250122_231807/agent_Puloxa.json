{
  "name": "Puloxa",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for Coalition Game\n\n% Payoff matrix for Coalition Game\npayoff('Compromise', 'Compromise', 3, 3).\npayoff('HoldFirm', 'Compromise', 4, 1).\npayoff('Compromise', 'HoldFirm', 1, 4).\npayoff('HoldFirm', 'HoldFirm', 2, 2).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(party1), s0).\ninitially(player(party2), s0).\ninitially(role(party1, row), s0).\ninitially(role(party2, col), s0).\ninitially(control(party1), s0).\ninitially(control(party2), s0).\ninitially(default_move(_, 'Compromise'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_Party2, _M2), do(move(_Party1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(Party, M), S) :- possible(move(Party, M), S), holds(control(Party), S).\n\n% What is possible for a player to choose\npossible(move(Party, 'HoldFirm'), S) :- holds(player(Party), S).\npossible(move(Party, 'Compromise'), S) :- holds(player(Party), S).\n\n% Moves that are opposite to each other.\nopposite_move('Compromise', 'HoldFirm').\nopposite_move('HoldFirm', 'Compromise').\n\n% The effects of a move: if Party has chosen M, then in the next state this\n% is what they did.\neffect(did(Party, M), move(Party, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(Party), move(Party, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S) :-\n    final(S),\n    holds(role(P1, row), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, col), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S) :-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S) :-\n    finally(outcome(_, _, _, P2, _, U2), S).\n",
  "game_moves": [
    "Compromise",
    "HoldFirm"
  ],
  "game_players": [
    "party1",
    "party2"
  ],
  "default_move": "Compromise",
  "moves": [
    "Compromise",
    "Compromise",
    "HoldFirm",
    "HoldFirm"
  ],
  "payoffs": [
    3.0,
    1.0,
    2.0,
    4.0
  ],
  "total_payoff": 10.0,
  "trace_messages": [],
  "attempts": 1
}