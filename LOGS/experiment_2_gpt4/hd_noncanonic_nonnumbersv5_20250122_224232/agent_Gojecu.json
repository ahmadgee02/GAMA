{
  "name": "Gojecu",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous payoff/4.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for Lease Negotiation Game\n\n% Payoff matrix for Lease Negotiation\npayoff('firm', 'firm', 0, 0).\npayoff('compromise', 'firm', 0, 5).\npayoff('firm', 'compromise', 5, 0).\npayoff('compromise', 'compromise', 3, 3).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(landlord), s0).\ninitially(player(tenant), s0).\ninitially(role(landlord,row), s0).\ninitially(role(tenant,col), s0).\ninitially(control(landlord), s0).\ninitially(control(tenant), s0).\ninitially(default_move(_, 'compromise'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_Tenant, _MTenant), do(move(_Landlord, _MLandlord), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'firm'), S):- holds(player(P), S).\npossible(move(P, 'compromise'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('compromise', 'firm').\nopposite_move('firm', 'compromise').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player looses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(landlord,MLandlord,ULandlord,tenant,MTenant,UTenant), S):-\n    final(S),\n    holds(role(landlord, row), S),\n    holds(did(landlord, MLandlord), S),\n    holds(role(tenant, col), S),\n    holds(did(tenant, MTenant), S),\n    payoff(MLandlord, MTenant, ULandlord, UTenant).\n\n% Goals achieved by the players.\nfinally(goal(landlord, ULandlord), S):-\n    finally(outcome(landlord,_,ULandlord,_,_,_), S).\nfinally(goal(tenant, UTenant), S):-\n    finally(outcome(_,_,_,tenant,_,UTenant), S).\n",
  "game_moves": [
    "compromise",
    "firm"
  ],
  "game_players": [
    "landlord",
    "tenant"
  ],
  "default_move": "compromise",
  "moves": [
    "compromise",
    "compromise",
    "firm",
    "firm"
  ],
  "payoffs": [
    3.0,
    0.0,
    0.0,
    5.0
  ],
  "total_payoff": 8.0,
  "trace_messages": [],
  "attempts": 1
}