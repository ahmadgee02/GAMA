{
  "name": "Bazoma",
  "strategy_name": "unnamed_strategy",
  "strategy_rules": null,
  "status": "missing_predicates",
  "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Sibling Inheritance Game\n\n% Payoff matrix for Sibling Inheritance Game\npayoff('Compromise', 'Compromise', 3, 3).\npayoff('Firm', 'Compromise', 4, 1).\npayoff('Compromise', 'Firm', 1, 4).\npayoff('Firm', 'Firm', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(s1), s0).\ninitially(player(s2), s0).\ninitially(role(s1, negotiator1), s0).\ninitially(role(s2, negotiator2), s0).\ninitially(control(s1), s0).\ninitially(control(s2), s0).\ninitially(default_move(_, 'Compromise'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2, \n% implying it is a legal state.\nfinal(do(move(_S2, _M2), do(move(_S1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(S, M), S):- possible(move(S, M), S), holds(control(S), S).\n\n% What is possible for a player to choose\npossible(move(S, 'Compromise'), S):- holds(player(S), S).\npossible(move(S, 'Firm'), S):- holds(player(S), S).\n\n% Moves that are opposite to each other.\nopposite_move('Compromise', 'Firm').\nopposite_move('Firm', 'Compromise').\n\n% The effects of a move: if S has chosen M, then in the next state this is what they did.\neffect(did(S, M), move(S, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e., cannot move anymore.\nabnormal(control(S), move(S, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(S1, M1, U1, S2, M2, U2), S):-\n    final(S),\n    holds(role(S1, negotiator1), S),\n    holds(did(S1, M1), S),\n    holds(role(S2, negotiator2), S),\n    holds(did(S2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(S1, U1), S):-\n    finally(outcome(S1, _, U1, _, _, _), S).\nfinally(goal(S2, U2), S):-\n    finally(outcome(_, _, _, S2, _, U2), S).\n",
  "game_moves": [],
  "game_players": [
    "s1",
    "s2"
  ],
  "default_move": "Compromise",
  "moves": [],
  "payoffs": [],
  "total_payoff": 0,
  "trace_messages": [],
  "attempts": 1
}