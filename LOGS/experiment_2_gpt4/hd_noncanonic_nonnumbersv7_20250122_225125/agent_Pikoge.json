{
  "name": "Pikoge",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": " \n% Payoff matrix for the Sibling Negotiation Game\npayoff('compromise', 'compromise', 3, 3).\npayoff('compromise', 'hold', 1, 4).\npayoff('hold', 'compromise', 4, 1).\npayoff('hold', 'hold', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(sibling1), s0).\ninitially(player(sibling2), s0).\ninitially(role(sibling1, row), s0).\ninitially(role(sibling2, col), s0).\ninitially(control(sibling1), s0).\ninitially(control(sibling2), s0).\ninitially(default_move(_, 'compromise'), s0).\n\n% When a state is final: no need to check content as it's generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_S2, _M2), do(move(_S1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'compromise'), S):- holds(player(P), S).\npossible(move(P, 'hold'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('compromise', 'hold').\nopposite_move('hold', 'compromise').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(S1, M1, U1, S2, M2, U2), S):-\n    final(S),\n    holds(role(S1, row), S),\n    holds(did(S1, M1), S),\n    holds(role(S2, col), S),\n    holds(did(S2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(S1, U1), S):-\n    finally(outcome(S1, _, U1, _, _, _), S).\nfinally(goal(S2, U2), S):-\n    finally(outcome(_, _, _, S2, _, U2), S).\n",
  "game_moves": [
    "compromise",
    "hold"
  ],
  "game_players": [
    "sibling1",
    "sibling2"
  ],
  "default_move": "compromise",
  "moves": [
    "compromise",
    "compromise",
    "hold",
    "hold"
  ],
  "payoffs": [
    3.0,
    1.0,
    0.0,
    4.0
  ],
  "total_payoff": 8.0,
  "trace_messages": [],
  "attempts": 1
}