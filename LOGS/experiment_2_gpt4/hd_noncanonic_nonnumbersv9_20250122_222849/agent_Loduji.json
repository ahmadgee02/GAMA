{
  "name": "Loduji",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n\n% Discontiguous declaration for SWI-Prolog\n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for Military Leaders Game\n\n% Payoff matrix for Military Leaders Game\n% Format: payoff(MoveLeader1, MoveLeader2, UtilityLeader1, UtilityLeader2)\npayoff('compromise', 'compromise', 3, 3).\npayoff('compromise', 'firm', 1, 4).\npayoff('firm', 'compromise', 4, 1).\npayoff('firm', 'firm', 2, 2).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(leader1), s0).\ninitially(player(leader2), s0).\ninitially(role(leader1,row), s0).\ninitially(role(leader2,col), s0).\ninitially(control(leader1), s0).\ninitially(control(leader2), s0).\ninitially(default_move(_, 'compromise'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_L2, _M2), do(move(_L1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(L, M), S):- possible(move(L, M), S), holds(control(L), S).\n\n% What is possible for a player to choose\npossible(move(L, 'compromise'), S):- holds(player(L), S).\npossible(move(L, 'firm'), S):- holds(player(L), S).\n\n% Moves that are opposite to each other.\n% Though in this context, opposite is more conceptual (compromise vs firm).\nopposite_move('compromise', 'firm').\nopposite_move('firm', 'compromise').\n\n% The effects of a move: if L has chosen M, then in the next state this\n% is what they did.\neffect(did(L, M), move(L, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(L), move(L, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(L1, M1, U1, L2, M2, U2), S):-\n    final(S),\n    holds(role(L1, row), S),\n    holds(did(L1, M1), S),\n    holds(role(L2, col), S),\n    holds(did(L2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(L1, U1), S):-\n    finally(outcome(L1, _, U1, _, _, _), S).\nfinally(goal(L2, U2), S):-\n    finally(outcome(_, _, _, L2, _, U2), S).\n\n",
  "game_moves": [
    "compromise",
    "firm"
  ],
  "game_players": [
    "leader1",
    "leader2"
  ],
  "default_move": "compromise",
  "moves": [
    "compromise",
    "compromise",
    "firm",
    "firm"
  ],
  "payoffs": [
    3.0,
    1.0,
    2.0,
    4.0
  ],
  "total_payoff": 10.0,
  "trace_messages": [],
  "attempts": 1
}