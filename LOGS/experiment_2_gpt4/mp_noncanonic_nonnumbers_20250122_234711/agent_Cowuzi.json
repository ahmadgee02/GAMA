{
  "name": "Cowuzi",
  "strategy_name": "anti-tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, M):-\n    holds(last_move(O, Mo), S),\n    opposite_move(Mo, M).",
  "status": "correct",
  "game_rules": "\n\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous payoff/4.\n:- discontiguous finally/2.\n\n/* Game specific predicates for the Gallery Promotion Game */\n\n% Payoff matrix for the Gallery Promotion Game\n% If choices match, small gallery profits; otherwise, big gallery profits\npayoff('A', 'A', 3, 1).\npayoff('B', 'B', 3, 1).\npayoff('A', 'B', 1, 3).\npayoff('B', 'A', 1, 3).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(small_gallery), s0).\ninitially(player(big_gallery), s0).\ninitially(role(small_gallery, small), s0).\ninitially(role(big_gallery, big), s0).\ninitially(control(small_gallery), s0).\ninitially(control(big_gallery), s0).\ninitially(default_move(_, 'A'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_G2, _M2), do(move(_G1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(G, M), S):- possible(move(G, M), S), holds(control(G), S).\n\n% What is possible for a player to choose\npossible(move(G, 'A'), S):- holds(player(G), S).\npossible(move(G, 'B'), S):- holds(player(G), S).\n\n% Moves that are opposite to each other (though not directly used in this game logic)\nopposite_move('A', 'B').\nopposite_move('B', 'A').\n\n% The effects of a move: if G has chosen M, then in the next state this\n% is what they did.\neffect(did(G, M), move(G, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(G), move(G, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(G1, M1, U1, G2, M2, U2), S):-\n    final(S),\n    holds(role(G1, small), S),\n    holds(did(G1, M1), S),\n    holds(role(G2, big), S),\n    holds(did(G2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(G1, U1), S):-\n    finally(outcome(G1, _, U1, _, _, _), S).\nfinally(goal(G2, U2), S):-\n    finally(outcome(_, _, _, G2, _, U2), S).\n\n",
  "game_moves": [
    "B",
    "A"
  ],
  "game_players": [
    "small_gallery",
    "big_gallery"
  ],
  "default_move": "A",
  "moves": [
    "A",
    "B",
    "B",
    "A"
  ],
  "payoffs": [
    3.0,
    1.0,
    3.0,
    1.0
  ],
  "total_payoff": 8.0,
  "trace_messages": [],
  "attempts": 0
}