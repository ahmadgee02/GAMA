{
  "name": "Mazuya",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": " \n:- discontiguous possible/2.\n:- discontiguous holds/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous final/1.\n\n% Payoff matrix for the basketball strategy game\n% Lesser-known team strategy | Top university strategy | Lesser-known team payoff | Top university payoff\npayoff('Offense', 'Offense', 3, 3).\npayoff('Defense', 'Defense', 3, 3).\npayoff('Offense', 'Defense', 1, 4).\npayoff('Defense', 'Offense', 4, 1).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: player specifics\ninitially(player(coach1), s0).\ninitially(player(coach2), s0).\ninitially(role(coach1, lesser_known), s0).\ninitially(role(coach2, top_uni), s0).\ninitially(control(coach1), s0).\ninitially(control(coach2), s0).\ninitially(default_move(_, 'Offense'), s0).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a coach to choose\npossible(move(P, 'Offense'), S):- holds(player(P), S).\npossible(move(P, 'Defense'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Offense', 'Defense').\nopposite_move('Defense', 'Offense').\n\n% The effects of a move: if a coach has chosen a strategy, then in the next state this is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e., cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):-initial(S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(C1, M1, U1, C2, M2, U2), S):-\n    final(S),\n    holds(role(C1, lesser_known), S),\n    holds(did(C1, M1), S),\n    holds(role(C2, top_uni), S),\n    holds(did(C2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(C1, U1), S):-\n    finally(outcome(C1, _, U1, _, _, _), S).\nfinally(goal(C2, U2), S):-\n    finally(outcome(_, _, _, C2, _, U2), S).\n\n",
  "game_moves": [
    "Offense",
    "Defense"
  ],
  "game_players": [
    "coach1",
    "coach2"
  ],
  "default_move": "Offense",
  "moves": [
    "Offense",
    "Offense",
    "Defense",
    "Defense"
  ],
  "payoffs": [
    3.0,
    1.0,
    3.0,
    4.0
  ],
  "total_payoff": 11.0,
  "trace_messages": [],
  "attempts": 1
}