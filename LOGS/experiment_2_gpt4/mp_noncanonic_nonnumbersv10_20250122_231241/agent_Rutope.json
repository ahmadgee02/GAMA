{
  "name": "Rutope",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": " \n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous payoff/4.\n:- discontiguous opposite_move/2.\n\n/* Game specific predicates for the Basketball Strategy Game */\n\n% Payoff matrix for Basketball Strategy Game\n% If strategies match, lesser-known team profits\npayoff('offense', 'offense', 3, 3).\npayoff('defense', 'defense', 3, 3).\n% If strategies differ, top university profits\npayoff('offense', 'defense', 1, 4).\npayoff('defense', 'offense', 1, 4).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play\ninitially(player(lesser_known_coach), s0).\ninitially(player(top_university_coach), s0).\ninitially(role(lesser_known_coach, lesser_team), s0).\ninitially(role(top_university_coach, top_team), s0).\ninitially(control(lesser_known_coach), s0).\ninitially(control(top_university_coach), s0).\ninitially(default_move(_, 'offense'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state\nfinal(do(move(_Coach2, _Strat2), do(move(_Coach1, _Strat1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn)\nlegal(move(Coach, Strat), S) :- possible(move(Coach, Strat), S), holds(control(Coach), S).\n\n% What is possible for a coach to choose\npossible(move(Coach, 'offense'), S) :- holds(player(Coach), S).\npossible(move(Coach, 'defense'), S) :- holds(player(Coach), S).\n\n% Moves that are opposite to each other\nopposite_move('offense', 'defense').\nopposite_move('defense', 'offense').\n\n% The effects of a move: if Coach has chosen Strategy, then in the next state this\n% is what they did\neffect(did(Coach, Strat), move(Coach, Strat), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore\nabnormal(control(Coach), move(Coach, _Strat), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities\nfinally(outcome(Coach1, Strat1, U1, Coach2, Strat2, U2), S) :-\n    final(S),\n    holds(role(Coach1, lesser_team), S),\n    holds(did(Coach1, Strat1), S),\n    holds(role(Coach2, top_team), S),\n    holds(did(Coach2, Strat2), S),\n    payoff(Strat1, Strat2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(Coach1, U1), S) :-\n    finally(outcome(Coach1, _, U1, _, _, _), S).\nfinally(goal(Coach2, U2), S) :-\n    finally(outcome(_, _, _, Coach2, _, U2), S).\n",
  "game_moves": [
    "offense",
    "defense"
  ],
  "game_players": [
    "lesser_known_coach",
    "top_university_coach"
  ],
  "default_move": "offense",
  "moves": [
    "offense",
    "offense",
    "defense",
    "defense"
  ],
  "payoffs": [
    3.0,
    1.0,
    3.0,
    1.0
  ],
  "total_payoff": 8.0,
  "trace_messages": [],
  "attempts": 1
}