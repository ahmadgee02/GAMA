{
  "name": "Rimija",
  "strategy_name": "anti-tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, M):-\n    holds(last_move(O, Mo), S),\n    opposite_move(Mo, M).",
  "status": "runtime_error",
  "game_rules": "\n\n:- discontiguous initially/2.\n:- discontiguous payoff/6.\n:- discontiguous possible/2.\n\n% Game specific predicates for the tech company product development game\n\n% Payoff matrix for the game\n% Parameters: player1's move, player2's move, player1's payoff, player2's payoff\npayoff('A', 'A', 4, -1). % Both develop A, startup profits, big corporation loses\npayoff('B', 'B', 4, -1). % Both develop B, startup profits, big corporation loses\npayoff('A', 'B', -2, 5). % Startup develops A, corporation develops B\npayoff('B', 'A', -2, 5). % Startup develops B, corporation develops A\n\n% Initial state\ninitial(s0).\n\n% What holds initially: players, their roles, and control\ninitially(player(startup), s0).\ninitially(player(corporation), s0).\ninitially(role(startup, small), s0).     % Startup is the smaller player\ninitially(role(corporation, large), s0). % Corporation is the larger player\ninitially(control(startup), s0).\ninitially(control(corporation), s0).\ninitially(default_move(_, 'A'), s0).\n\n% A legal move is a possible move where the player has control\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'A'), S):- holds(player(P), S).\npossible(move(P, 'B'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other (for capturing strategic differences)\nopposite_move('A', 'B').\nopposite_move('B', 'A').\n\n% The effects of a move: if P has chosen M, then in the next state this is what they did\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e., cannot move anymore\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, moves, and utilities\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, small), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, large), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_, _, _, P2, _, U2), S).\n\n",
  "game_moves": [
    "B",
    "A"
  ],
  "game_players": [
    "startup",
    "corporation"
  ],
  "default_move": "A",
  "moves": [
    "A"
  ],
  "payoffs": [],
  "total_payoff": 0,
  "trace_messages": [],
  "attempts": 0
}