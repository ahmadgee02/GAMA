{
  "name": "Kekese",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": " \n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for Warlord's Strategy Game (WSG) */\n\n% Payoff matrix for WSG\n% The first payoff is for the stronger warlord, and the second is for the weaker warlord.\npayoff('attack', 'attack', 2, 3).\npayoff('defend', 'defend', 2, 3).\npayoff('attack', 'defend', 4, 1).\npayoff('defend', 'attack', 4, 1).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(w1), s0).\ninitially(player(w2), s0).\ninitially(role(w1, stronger), s0).\ninitially(role(w2, weaker), s0).\ninitially(control(w1), s0).\ninitially(control(w2), s0).\ninitially(default_move(_, 'defend'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_W2, _M2), do(move(_W1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (it's their turn).\nlegal(move(W, M), S):- possible(move(W, M), S), holds(control(W), S).\n\n% What is possible for a player to choose\npossible(move(W,'attack'), S):- holds(player(W), S).\npossible(move(W,'defend'), S):- holds(player(W), S).\n\n% Moves that are opposite to each other.\nopposite_move('attack', 'defend').\nopposite_move('defend', 'attack').\n\n% The effects of a move: if W has chosen M, then in the next state this\n% is what they did.\neffect(did(W, M), move(W, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(W), move(W, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(W1,M1,U1,W2,M2,U2), S):-\n    final(S),\n    holds(role(W1, stronger), S),\n    holds(did(W1, M1), S),\n    holds(role(W2, weaker), S),\n    holds(did(W2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(W1, U1), S):-\n    finally(outcome(W1,_,U1,_,_,_), S).\nfinally(goal(W2, U2), S):-\n    finally(outcome(_,_,_,W2,_,U2), S).\n\n",
  "game_moves": [
    "attack",
    "defend"
  ],
  "game_players": [
    "w1",
    "w2"
  ],
  "default_move": "defend",
  "moves": [
    "defend",
    "defend",
    "attack",
    "attack"
  ],
  "payoffs": [
    2.0,
    4.0,
    2.0,
    4.0
  ],
  "total_payoff": 12.0,
  "trace_messages": [],
  "attempts": 1
}