{
  "name": "Lijave",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous initial_state/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous outcome/6.\n:- discontiguous goal/2.\n\n% Payoff matrix for the conflict-stricken region game.\npayoff('attack', 'attack', 1, 2).\npayoff('defend', 'defend', 1, 2).\npayoff('attack', 'defend', 4, 3).\npayoff('defend', 'attack', 3, 4).\n\n% Initial state\ninitial_state(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(warlord1), s0).\ninitially(player(warlord2), s0).\ninitially(role(warlord1, stronger), s0).\ninitially(role(warlord2, weaker), s0).\ninitially(control(warlord1), s0).\ninitially(control(warlord2), s0).\ninitially(default_move(_, 'defend'), s0).\n\n% When a state is final.\nfinal(do(move(_W2, _M2), do(move(_W1, _M1), S))):- initial_state(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(W, M), S):- possible(move(W, M), S), holds(control(W), S).\n\n% What is possible for a player to choose.\npossible(move(W, 'attack'), S):- holds(player(W), S).\npossible(move(W, 'defend'), S):- holds(player(W), S).\n\n% Moves that are opposite to each other.\nopposite_move('attack', 'defend').\nopposite_move('defend', 'attack').\n\n% The effects of a move: if W has chosen M, then in the next state this is what they did.\neffect(did(W, M), move(W, M), _S).\n\n% The effects of a move: once a move is made, the player loses control.\nabnormal(control(W), move(W, _M), _S).\n\n% What holds finally: the outcome with players, moves, and utilities.\nfinally(outcome(W1, M1, U1, W2, M2, U2), S):-\n    final(S),\n    holds(role(W1, stronger), S),\n    holds(did(W1, M1), S),\n    holds(role(W2, weaker), S),\n    holds(did(W2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(W1, U1), S):- finally(outcome(W1, _, U1, _, _, _), S).\nfinally(goal(W2, U2), S):- finally(outcome(_, _, _, W2, _, U2), S).\n",
  "game_moves": [
    "attack",
    "defend"
  ],
  "game_players": [
    "warlord1",
    "warlord2"
  ],
  "default_move": "defend",
  "moves": [
    "defend",
    "defend",
    "attack",
    "attack"
  ],
  "payoffs": [
    1.0,
    3.0,
    1.0,
    4.0
  ],
  "total_payoff": 9.0,
  "trace_messages": [],
  "attempts": 1
}