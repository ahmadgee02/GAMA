{
  "name": "Zodazi",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": " \n:- discontiguous initially/2.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous final/1.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for the warlord game */\n\n% Payoff matrix for the warlord game\n% Assume stronger warlord is 'w1' and weaker warlord is 'w2'\npayoff('attack', 'attack', 1, 3).\npayoff('defend', 'defend', 1, 3).\npayoff('attack', 'defend', 4, 2).\npayoff('defend', 'attack', 4, 2).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: define players, their roles, and control\ninitially(player(w1), s0).\ninitially(player(w2), s0).\ninitially(role(w1, stronger), s0).\ninitially(role(w2, weaker), s0).\ninitially(control(w1), s0).\ninitially(control(w2), s0).\ninitially(default_move(_, 'defend'), s0).\n\n% When a state is final\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% Possible moves for a player: attack or defend\npossible(move(P, 'attack'), S) :- holds(player(P), S).\npossible(move(P, 'defend'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other\nopposite_move('attack', 'defend').\nopposite_move('defend', 'attack').\n\n% The effects of a move\neffect(did(P, M), move(P, M), _S).\n\n% Once a move is made, the player loses control\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: outcome with players, Moves, and Utilities\nfinally(outcome(P1, M1, U1, P2, M2, U2), S) :-\n    final(S),\n    holds(role(P1, stronger), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, weaker), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(P1, U1), S) :-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S) :-\n    finally(outcome(_, _, _, P2, _, U2), S).\n",
  "game_moves": [
    "attack",
    "defend"
  ],
  "game_players": [
    "w1",
    "w2"
  ],
  "default_move": "defend",
  "moves": [
    "defend",
    "defend",
    "attack",
    "attack"
  ],
  "payoffs": [
    1.0,
    4.0,
    1.0,
    4.0
  ],
  "total_payoff": 10.0,
  "trace_messages": [],
  "attempts": 1
}