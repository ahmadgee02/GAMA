{
  "name": "Loheqo",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous initially/2.\n:- discontiguous payoff/4.\n\n/* Game specific predicates for Fashion Designers' Game */\n\n% Payoff matrix for the Fashion Designers' Game\n% Assume classical-classical results in more attention for the new designer.\n% Assume avant-garde-avant-garde results in more attention for the new designer.\n% Assume different choices benefit the established designer.\npayoff('Classical', 'Classical', 3, 1).\npayoff('Avant-garde', 'Avant-garde', 3, 1).\npayoff('Classical', 'Avant-garde', 1, 4).\npayoff('Avant-garde', 'Classical', 1, 4).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and default move\ninitially(player(new_designer), s0).\ninitially(player(established_designer), s0).\ninitially(role(new_designer, row), s0).\ninitially(role(established_designer, col), s0).\ninitially(control(new_designer), s0).\ninitially(control(established_designer), s0).\ninitially(default_move(_, 'Classical'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Classical'), S) :- holds(player(P), S).\npossible(move(P, 'Avant-garde'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Classical', 'Avant-garde').\nopposite_move('Avant-garde', 'Classical').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S) :-\n    final(S),\n    holds(role(P1, row), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, col), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S) :- finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S) :- finally(outcome(_, _, _, P2, _, U2), S).\n",
  "game_moves": [
    "Avant-garde",
    "Classical"
  ],
  "game_players": [
    "new_designer",
    "established_designer"
  ],
  "default_move": "Classical",
  "moves": [
    "Classical",
    "Classical",
    "Avant-garde",
    "Avant-garde"
  ],
  "payoffs": [
    3.0,
    1.0,
    3.0,
    1.0
  ],
  "total_payoff": 8.0,
  "trace_messages": [],
  "attempts": 1
}