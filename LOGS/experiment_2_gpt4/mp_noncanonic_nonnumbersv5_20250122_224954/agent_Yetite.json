{
  "name": "Yetite",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n% SWI Prolog directive for non-contiguous predicates\n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/4.\n\n% Payoff matrix for the Fashion Designers' Game\n% Keywords: ('C' = Classical, 'A' = Avant-garde)\npayoff('C', 'C', 2, 3). % Both go classical\npayoff('A', 'A', 3, 2). % Both go avant-garde\npayoff('C', 'A', 4, 1). % Established goes classical, New goes avant-garde\npayoff('A', 'C', 1, 4). % Established goes avant-garde, New goes classical\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(d1), s0). % Designer 1 (new)\ninitially(player(d2), s0). % Designer 2 (established)\ninitially(role(d1, new), s0). % Role of Designer 1\ninitially(role(d2, established), s0). % Role of Designer 2\ninitially(control(d1), s0). % Designer 1 has control initially\ninitially(control(d2), s0). % Designer 2 has control initially\ninitially(default_move(_, 'C'), s0). % Default move is classical\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_D2, _M2), do(move(_D1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is at their turn).\nlegal(move(D, M), S) :- possible(move(D, M), S), holds(control(D), S).\n\n% What is possible for a player to choose\npossible(move(D, 'C'), S) :- holds(player(D), S).\npossible(move(D, 'A'), S) :- holds(player(D), S).\n\n% Moves that are opposite to each other.\nopposite_move('C', 'A').\nopposite_move('A', 'C').\n\n% The effects of a move: if D has chosen M, then in the next state this is what they did.\neffect(did(D, M), move(D, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(D), move(D, _M), _S).\n\n% What holds finally: the outcome with players, moves, and utilities.\nfinally(outcome(D1, M1, U1, D2, M2, U2), S) :-\n    final(S),\n    holds(role(D1, new), S),\n    holds(did(D1, M1), S),\n    holds(role(D2, established), S),\n    holds(did(D2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(D1, U1), S) :-\n    finally(outcome(D1, _, U1, _, _, _), S).\nfinally(goal(D2, U2), S) :-\n    finally(outcome(_, _, _, D2, _, U2), S).\n",
  "game_moves": [
    "C",
    "A"
  ],
  "game_players": [
    "d1",
    "d2"
  ],
  "default_move": "C",
  "moves": [
    "C",
    "C",
    "A",
    "A"
  ],
  "payoffs": [
    2.0,
    4.0,
    3.0,
    1.0
  ],
  "total_payoff": 10.0,
  "trace_messages": [],
  "attempts": 1
}