{
  "name": "Fofiqi",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for the Film Release Game */\n\n% Payoff matrix for the Film Release Game\n% Payoffs when both release on the holiday weekend\npayoff('holiday', 'holiday', 3, -1).\n% Payoffs when independent releases on a regular weekend, major on holiday\npayoff('regular', 'holiday', 0, 5).\n% Payoffs when independent releases on holiday, major on regular weekend\npayoff('holiday', 'regular', 5, 0).\n% Payoffs when both release on a regular weekend\npayoff('regular', 'regular', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, and their control and roles\ninitially(player(indie), s0).\ninitially(player(major), s0).\ninitially(role(indie, indie), s0).\ninitially(role(major, studio), s0).\ninitially(control(indie), s0).\ninitially(control(major), s0).\ninitially(default_move(_, 'regular'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'holiday'), S):- holds(player(P), S).\npossible(move(P, 'regular'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('holiday', 'regular').\nopposite_move('regular', 'holiday').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1,M1,U1,P2,M2,U2), S):-\n    final(S),\n    holds(role(P1, indie), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, studio), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1,_,U1,_,_,_), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_,_,_,P2,_,U2), S).\n",
  "game_moves": [
    "regular",
    "holiday"
  ],
  "game_players": [
    "indie",
    "major"
  ],
  "default_move": "regular",
  "moves": [
    "regular",
    "regular",
    "holiday",
    "holiday"
  ],
  "payoffs": [
    0.0,
    0.0,
    3.0,
    5.0
  ],
  "total_payoff": 8.0,
  "trace_messages": [],
  "attempts": 1
}