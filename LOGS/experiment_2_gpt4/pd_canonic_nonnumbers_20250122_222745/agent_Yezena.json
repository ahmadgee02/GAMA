{
  "name": "Yezena",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": " \n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n\n% Game-specific predicates for the Prisoner's Dilemma-like game with interrogation scenario.\n\n% Payoff matrix for Interrogation Game\n% Payoffs are represented as (suspect1, suspect2).\npayoff('confess', 'confess', -2, -2).\npayoff('silent', 'confess', -5, 0).\npayoff('confess', 'silent', 0, -5).\npayoff('silent', 'silent', -1, -1).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(suspect1), s0).\ninitially(player(suspect2), s0).\ninitially(role(suspect1, row), s0).\ninitially(role(suspect2, col), s0).\ninitially(control(suspect1), s0).\ninitially(control(suspect2), s0).\ninitially(default_move(_, 'silent'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_S2, _M2), do(move(_S1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(S, M), S0):- possible(move(S, M), S0), holds(control(S), S0).\n\n% What is possible for a player to choose\npossible(move(S, 'confess'), S0):- holds(player(S), S0).\npossible(move(S, 'silent'), S0):- holds(player(S), S0).\n\n% Moves that are opposite to each other.\nopposite_move('silent', 'confess').\nopposite_move('confess', 'silent').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(S, M), move(S, M), _S0).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(S), move(S, _M), _S0).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(S1, M1, U1, S2, M2, U2), S):-\n    final(S),\n    holds(role(S1, row), S),\n    holds(did(S1, M1), S),\n    holds(role(S2, col), S),\n    holds(did(S2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(S1, U1), S):-\n    finally(outcome(S1, _, U1, _, _, _), S).\nfinally(goal(S2, U2), S):-\n    finally(outcome(_, _, _, S2, _, U2), S).\n",
  "game_moves": [
    "silent",
    "confess"
  ],
  "game_players": [
    "suspect1",
    "suspect2"
  ],
  "default_move": "silent",
  "moves": [
    "silent",
    "silent",
    "confess",
    "confess"
  ],
  "payoffs": [
    -1.0,
    -5.0,
    -2.0,
    0.0
  ],
  "total_payoff": -8.0,
  "trace_messages": [],
  "attempts": 1
}