{
  "name": "Zokixu",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous abnormal/3.\n:- discontiguous effect/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for the Prisoner's Dilemma with the new scenario\n\n% Payoff matrix for the modified Prisoner's Dilemma\npayoff('D', 'D', 2, 2). % Both confess\npayoff('C', 'D', 0, 3). % One remains silent, the other confesses\npayoff('D', 'C', 3, 0). % One confesses, the other remains silent\npayoff('C', 'C', 1, 1). % Both remain silent\n\n% Initial state\ninitial(s0).\n\n% What holds initially: definition of players, roles, control, and default moves\ninitially(player(suspect1), s0).\ninitially(player(suspect2), s0).\ninitially(role(suspect1, row), s0).\ninitially(role(suspect2, col), s0).\ninitially(control(suspect1), s0).\ninitially(control(suspect2), s0).\ninitially(default_move(_, 'C'), s0).\n\n% When a state is final\nfinal(do(move(_Suspect2, _M2), do(move(_Suspect1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control\nlegal(move(Suspect, M), S) :- possible(move(Suspect, M), S), holds(control(Suspect), S).\n\n% Possible moves for a player\npossible(move(Suspect, 'D'), S) :- holds(player(Suspect), S).\npossible(move(Suspect, 'C'), S) :- holds(player(Suspect), S).\n\n% Moves that are opposite to each other\nopposite_move('C', 'D').\nopposite_move('D', 'C').\n\n% The effects of a move: record the move made\neffect(did(Suspect, M), move(Suspect, M), _S).\n\n% The effects of a move: once a move is made, the player loses control\nabnormal(control(Suspect), move(Suspect, _M), _S).\n\n% What holds finally: the outcome with players, moves, and utilities\nfinally(outcome(Suspect1, M1, U1, Suspect2, M2, U2), S) :-\n    final(S),\n    holds(role(Suspect1, row), S),\n    holds(did(Suspect1, M1), S),\n    holds(role(Suspect2, col), S),\n    holds(did(Suspect2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(Suspect1, U1), S) :-\n    finally(outcome(Suspect1, _, U1, _, _, _), S).\nfinally(goal(Suspect2, U2), S) :-\n    finally(outcome(_, _, _, Suspect2, _, U2), S).\n\n",
  "game_moves": [
    "D",
    "C"
  ],
  "game_players": [
    "suspect1",
    "suspect2"
  ],
  "default_move": "C",
  "moves": [
    "C",
    "C",
    "D",
    "D"
  ],
  "payoffs": [
    1.0,
    0.0,
    2.0,
    3.0
  ],
  "total_payoff": 6.0,
  "trace_messages": [],
  "attempts": 1
}