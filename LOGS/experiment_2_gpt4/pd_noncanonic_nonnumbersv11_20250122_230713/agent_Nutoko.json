{
  "name": "Nutoko",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous payoff/4.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for Roommates' Cleaning Game */\n\n% Payoff matrix for Roommates' Cleaning Game\npayoff('Do_Clean', 'Do_Clean', 3, 3). % Both clean\npayoff('Do_Not_Clean', 'Do_Clean', 4, 1). % One does not clean\npayoff('Do_Clean', 'Do_Not_Clean', 1, 4). % The other does not clean\npayoff('Do_Not_Clean', 'Do_Not_Clean', 2, 2). % Neither clean\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(roommate1), s0).\ninitially(player(roommate2), s0).\ninitially(role(roommate1, r1), s0).\ninitially(role(roommate2, r2), s0).\ninitially(control(roommate1), s0).\ninitially(control(roommate2), s0).\ninitially(default_move(_, 'Do_Clean'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_R2, _M2), do(move(_R1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(R, M), S):- possible(move(R, M), S), holds(control(R), S).\n\n% What is possible for a player to choose\npossible(move(R, 'Do_Clean'), S):- holds(player(R), S).\npossible(move(R, 'Do_Not_Clean'), S):- holds(player(R), S).\n\n% Moves that are opposite to each other.\nopposite_move('Do_Clean', 'Do_Not_Clean').\nopposite_move('Do_Not_Clean', 'Do_Clean').\n\n% The effects of a move: if R has chosen M, then in the next state this\n% is what they did.\neffect(did(R, M), move(R, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(R), move(R, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(R1, M1, U1, R2, M2, U2), S):-\n    final(S),\n    holds(role(R1, r1), S),\n    holds(did(R1, M1), S),\n    holds(role(R2, r2), S),\n    holds(did(R2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(R1, U1), S):-\n    finally(outcome(R1, _, U1, _, _, _), S).\nfinally(goal(R2, U2), S):-\n    finally(outcome(_, _, _, R2, _, U2), S).\n\n",
  "game_moves": [
    "Do_Not_Clean",
    "Do_Clean"
  ],
  "game_players": [
    "roommate1",
    "roommate2"
  ],
  "default_move": "Do_Clean",
  "moves": [
    "Do_Clean",
    "Do_Clean",
    "Do_Not_Clean",
    "Do_Not_Clean"
  ],
  "payoffs": [
    3.0,
    1.0,
    2.0,
    4.0
  ],
  "total_payoff": 10.0,
  "trace_messages": [],
  "attempts": 1
}