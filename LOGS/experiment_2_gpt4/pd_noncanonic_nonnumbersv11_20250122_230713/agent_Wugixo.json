{
  "name": "Wugixo",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": " \n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for Roommates Cleaning Dilemma */\n\n% Payoff matrix for Cleaning Dilemma\n% (shared clean, shared clean): harmonious relationship\npayoff('clean', 'clean', 3, 3).\n% (clean, not clean): cleaner feels resentful, non-cleaner enjoys the cleanliness\npayoff('clean', 'not_clean', 1, 4).\n% (not clean, clean): similar to above\npayoff('not_clean', 'clean', 4, 1).\n% (not clean, not clean): messy environment, mutual frustration\npayoff('not_clean', 'not_clean', 2, 2).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play\ninitially(player(r1), s0).\ninitially(player(r2), s0).\ninitially(role(r1, row), s0).\ninitially(role(r2, col), s0).\ninitially(control(r1), s0).\ninitially(control(r2), s0).\ninitially(default_move(_, 'not_clean'), s0).\n\n% A state is final after each roommate makes their move\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn)\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'clean'), S) :- holds(player(P), S).\npossible(move(P, 'not_clean'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other\nopposite_move('clean', 'not_clean').\nopposite_move('not_clean', 'clean').\n\n% The effects of a move: if P has chosen M, then in the next state this is what they did\neffect(did(P, M), move(P, M), _S).\n\n% Once a move is made, the player loses control, i.e., cannot move anymore\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities\nfinally(outcome(R1, M1, U1, R2, M2, U2), S) :-\n    final(S),\n    holds(role(R1, row), S),\n    holds(did(R1, M1), S),\n    holds(role(R2, col), S),\n    holds(did(R2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(R1, U1), S) :-\n    finally(outcome(R1, _, U1, _, _, _), S).\nfinally(goal(R2, U2), S) :-\n    finally(outcome(_, _, _, R2, _, U2), S).\n",
  "game_moves": [
    "clean",
    "not_clean"
  ],
  "game_players": [
    "r1",
    "r2"
  ],
  "default_move": "not_clean",
  "moves": [
    "not_clean",
    "not_clean",
    "clean",
    "clean"
  ],
  "payoffs": [
    2.0,
    4.0,
    3.0,
    1.0
  ],
  "total_payoff": 10.0,
  "trace_messages": [],
  "attempts": 1
}