{
  "name": "Dinaga",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n:- discontiguous payoff/4.\n\n% Payoff matrix for the neighbors' tax reporting game\npayoff('True', 'True', 3, 3).   % Both report truthfully\npayoff('True', 'Under', 1, 4).  % One reports truthfully, one underreports\npayoff('Under', 'True', 4, 1).\npayoff('Under', 'Under', 2, 2). % Both underreport\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(neighbor1), s0).\ninitially(player(neighbor2), s0).\ninitially(role(neighbor1, row), s0).\ninitially(role(neighbor2, col), s0).\ninitially(control(neighbor1), s0).\ninitially(control(neighbor2), s0).\ninitially(default_move(_, 'True'), s0).\n\n% When a state is final: similar condition as in the original game.\nfinal(do(move(_Neighbor2, _M2), do(move(_Neighbor1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P,'True'), S) :- holds(player(P), S).\npossible(move(P,'Under'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('True', 'Under').\nopposite_move('Under', 'True').\n\n% The effects of a move: if P has chosen M, then in the next state this is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1,M1,U1,P2,M2,U2), S):-\n    final(S),\n    holds(role(P1, row), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, col), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S) :-\n    finally(outcome(P1,_,U1,_,_,_), S).\nfinally(goal(P2, U2), S) :-\n    finally(outcome(_,_,_,P2,_,U2), S).\n",
  "game_moves": [
    "Under",
    "True"
  ],
  "game_players": [
    "neighbor1",
    "neighbor2"
  ],
  "default_move": "True",
  "moves": [
    "True",
    "True",
    "Under",
    "Under"
  ],
  "payoffs": [
    3.0,
    1.0,
    2.0,
    4.0
  ],
  "total_payoff": 10.0,
  "trace_messages": [],
  "attempts": 1
}