{
  "name": "Wizesi",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game-specific predicates for Spy Exchange Dilemma (SED)\n\n% Payoff matrix for SED\npayoff('Exchange', 'Exchange', 3, 3).\npayoff('Betray', 'Exchange', 5, 0).\npayoff('Exchange', 'Betray', 0, 5).\npayoff('Betray', 'Betray', 1, 1).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(nation1), s0).\ninitially(player(nation2), s0).\ninitially(role(nation1, initiative), s0).\ninitially(role(nation2, responder), s0).\ninitially(control(nation1), s0).\ninitially(control(nation2), s0).\ninitially(default_move(_, 'Betray'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_N2, _M2), do(move(_N1, _M1), S))):- initial(S).\n\n% A legal move is possible if the player has control (it is their turn).\nlegal(move(N, M), S):- possible(move(N, M), S), holds(control(N), S).\n\n% What is possible for a player to choose.\npossible(move(N, 'Exchange'), S):- holds(player(N), S).\npossible(move(N, 'Betray'), S):- holds(player(N), S).\n\n% Moves that are opposite to each other.\nopposite_move('Exchange', 'Betray').\nopposite_move('Betray', 'Exchange').\n\n% The effects of a move: if N has chosen M, then in the next state this\n% is what they did.\neffect(did(N, M), move(N, M), _S).\n\n% The effects of a move: once a move is made, the player loses control,\n% i.e., cannot move anymore.\nabnormal(control(N), move(N, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(N1, M1, U1, N2, M2, U2), S):-\n    final(S),\n    holds(role(N1, initiative), S),\n    holds(did(N1, M1), S),\n    holds(role(N2, responder), S),\n    holds(did(N2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(N1, U1), S):-\n    finally(outcome(N1, _, U1, _, _, _), S).\nfinally(goal(N2, U2), S):-\n    finally(outcome(_, _, _, N2, _, U2), S).\n",
  "game_moves": [
    "Betray",
    "Exchange"
  ],
  "game_players": [
    "nation1",
    "nation2"
  ],
  "default_move": "Betray",
  "moves": [
    "Betray",
    "Betray",
    "Exchange",
    "Exchange"
  ],
  "payoffs": [
    1.0,
    5.0,
    3.0,
    0.0
  ],
  "total_payoff": 9.0,
  "trace_messages": [],
  "attempts": 1
}