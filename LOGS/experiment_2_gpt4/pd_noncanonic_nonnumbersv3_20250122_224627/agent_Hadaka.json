{
  "name": "Hadaka",
  "strategy_name": "anti-tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, M):-\n    holds(last_move(O, Mo), S),\n    opposite_move(Mo, M).",
  "status": "correct",
  "game_rules": "\n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n\n/* Game specific predicates for the new Game */\n\n% Payoff matrix for the given game\npayoff('Withhold', 'Withhold', 2, 2). % Both withhold ideas\npayoff('Share', 'Withhold', 1, 4).    % One shares while the other withholds\npayoff('Withhold', 'Share', 4, 1).    % The other case of one sharing and one withholding\npayoff('Share', 'Share', 3, 3).       % Both share ideas\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(emp1), s0).\ninitially(player(emp2), s0).\ninitially(role(emp1, contributes), s0).\ninitially(role(emp2, contributes), s0).\ninitially(control(emp1), s0).\ninitially(control(emp2), s0).\ninitially(default_move(_, 'Share'), s0).\n\n% When a state is final: no need to check content as it was generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_Emp2, _M2), do(move(_Emp1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (it is their turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Withhold'), S) :- holds(player(P), S).\npossible(move(P, 'Share'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Share', 'Withhold').\nopposite_move('Withhold', 'Share').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(Emp1, M1, U1, Emp2, M2, U2), S) :-\n    final(S),\n    holds(role(Emp1, contributes), S),\n    holds(did(Emp1, M1), S),\n    holds(role(Emp2, contributes), S),\n    holds(did(Emp2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(Emp1, U1), S) :-\n    finally(outcome(Emp1, _, U1, _, _, _), S).\nfinally(goal(Emp2, U2), S) :-\n    finally(outcome(_, _, _, Emp2, _, U2), S).\n",
  "game_moves": [
    "Share",
    "Withhold"
  ],
  "game_players": [
    "emp1",
    "emp2"
  ],
  "default_move": "Share",
  "moves": [
    "Share",
    "Withhold",
    "Withhold",
    "Share"
  ],
  "payoffs": [
    3.0,
    2.0,
    2.0,
    3.0
  ],
  "total_payoff": 10.0,
  "trace_messages": [],
  "attempts": 0
}