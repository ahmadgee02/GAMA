{
  "name": "Terobi",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "  \n\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous payoff/4.\n:- discontiguous opposite_move/2.\n\n/* Game specific predicates for the Joint Project Sharing Dilemma (JPSD) */\n\n% Payoff matrix for JPSD\npayoff('share', 'share', 5, 5).\npayoff('share', 'withhold', 2, 6).\npayoff('withhold', 'share', 6, 2).\npayoff('withhold', 'withhold', 3, 3).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(e1), s0).\ninitially(player(e2), s0).\ninitially(role(e1, row), s0).\ninitially(role(e2, col), s0).\ninitially(control(e1), s0).\ninitially(control(e2), s0).\ninitially(default_move(_, 'share'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_E2, _M2), do(move(_E1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(E, M), S) :- possible(move(E, M), S), holds(control(E), S).\n\n% What is possible for a player to choose\npossible(move(E, 'share'), S) :- holds(player(E), S).\npossible(move(E, 'withhold'), S) :- holds(player(E), S).\n\n% Moves that are opposite to each other.\nopposite_move('share', 'withhold').\nopposite_move('withhold', 'share').\n\n% The effects of a move: if E has chosen M, then in the next state this\n% is what they did.\neffect(did(E, M), move(E, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(E), move(E, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(E1, M1, U1, E2, M2, U2), S) :-\n    final(S),\n    holds(role(E1, row), S),\n    holds(did(E1, M1), S),\n    holds(role(E2, col), S),\n    holds(did(E2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(E1, U1), S) :- finally(outcome(E1, _, U1, _, _, _), S).\nfinally(goal(E2, U2), S) :- finally(outcome(_, _, _, E2, _, U2), S).\n\n",
  "game_moves": [
    "withhold",
    "share"
  ],
  "game_players": [
    "e1",
    "e2"
  ],
  "default_move": "share",
  "moves": [
    "share",
    "share",
    "withhold",
    "withhold"
  ],
  "payoffs": [
    5.0,
    2.0,
    3.0,
    6.0
  ],
  "total_payoff": 16.0,
  "trace_messages": [],
  "attempts": 1
}