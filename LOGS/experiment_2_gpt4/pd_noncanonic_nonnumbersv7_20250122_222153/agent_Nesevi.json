{
  "name": "Nesevi",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n\n% Discontiguous declaration for SWI-Prolog\n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for Disarmament Treaty game\n\n% Payoff matrix for Disarmament Treaty\npayoff('C', 'C', 3, 3). % Both comply: mutual benefit\npayoff('C', 'D', 1, 4). % One complies, the other defects: strategic disadvantage/advantage\npayoff('D', 'C', 4, 1). % One defects, the other complies: strategic advantage/disadvantage\npayoff('D', 'D', 2, 2). % Both defect: ongoing arms race\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play\ninitially(player(c1), s0).\ninitially(player(c2), s0).\ninitially(role(c1, row), s0).\ninitially(role(c2, col), s0).\ninitially(control(c1), s0).\ninitially(control(c2), s0).\ninitially(default_move(_, 'C'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state\nfinal(do(move(_C2, _M2), do(move(_C1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control\nlegal(move(C, M), S) :- possible(move(C, M), S), holds(control(C), S).\n\n% What is possible for a country to choose\npossible(move(C, 'D'), S) :- holds(player(C), S).\npossible(move(C, 'C'), S) :- holds(player(C), S).\n\n% Moves that are opposite to each other\nopposite_move('C', 'D').\nopposite_move('D', 'C').\n\n% The effects of a move: if C has chosen M, then in the next state this\n% is what they did\neffect(did(C, M), move(C, M), _S).\n\n% The effects of a move: once a move is made, the player loses control,\n% i.e., cannot move anymore\nabnormal(control(C), move(C, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities\nfinally(outcome(C1, M1, U1, C2, M2, U2), S) :-\n    final(S),\n    holds(role(C1, row), S),\n    holds(did(C1, M1), S),\n    holds(role(C2, col), S),\n    holds(did(C2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(C1, U1), S) :-\n    finally(outcome(C1, _, U1, _, _, _), S).\nfinally(goal(C2, U2), S) :-\n    finally(outcome(_, _, _, C2, _, U2), S).\n\n% Marking the end of the Prolog code\n",
  "game_moves": [
    "D",
    "C"
  ],
  "game_players": [
    "c1",
    "c2"
  ],
  "default_move": "C",
  "moves": [
    "C",
    "C",
    "D",
    "D"
  ],
  "payoffs": [
    3.0,
    1.0,
    2.0,
    4.0
  ],
  "total_payoff": 10.0,
  "trace_messages": [],
  "attempts": 1
}