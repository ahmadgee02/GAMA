{
  "name": "Tesixu",
  "strategy_name": "anti-tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, M):-\n    holds(last_move(O, Mo), S),\n    opposite_move(Mo, M).",
  "status": "runtime_error",
  "game_rules": "\n% This directive allows predicates to be defined in non-contiguous clauses in the file.\n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n\n% Game specific predicates for Stag Hunt\n\n% Payoff matrix for Stag Hunt\npayoff('H', 'H', 2, 2).\npayoff('S', 'H', 0, 3).\npayoff('H', 'S', 3, 0).\npayoff('S', 'S', 4, 4).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(h1), s0).\ninitially(player(h2), s0).\ninitially(role(h1, row), s0).\ninitially(role(h2, col), s0).\ninitially(control(h1), s0).\ninitially(control(h2), s0).\ninitially(default_move(_, 'S'), s0).\n\n% What is possible for a player to choose\npossible(move(P, 'H'), S):- holds(player(P), S).\npossible(move(P, 'S'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('S', 'H').\nopposite_move('H', 'S').\n\n",
  "game_moves": [
    "H",
    "S"
  ],
  "game_players": [
    "h1",
    "h2"
  ],
  "default_move": "S",
  "moves": [
    "S"
  ],
  "payoffs": [],
  "total_payoff": 0,
  "trace_messages": [],
  "attempts": 0
}