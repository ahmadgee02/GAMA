{
  "name": "Sehafu",
  "strategy_name": "unnamed_strategy",
  "strategy_rules": null,
  "status": "missing_predicates",
  "game_rules": "\n\n:- discontiguous payoff/4.\n\n% Game specific predicates for the Soccer Strategy Game\n\n% Payoff matrix for the Soccer Strategy Game\npayoff('individual', 'individual', 1, 1).\npayoff('collaborate', 'individual', 0, 3).\npayoff('individual', 'collaborate', 3, 0).\npayoff('collaborate', 'collaborate', 5, 5).\n\n% Initial state\ninitial(soccer_s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(p1), soccer_s0).\ninitially(player(p2), soccer_s0).\ninitially(role(p1,offense), soccer_s0).\ninitially(role(p2,defense), soccer_s0).\ninitially(control(p1), soccer_s0).\ninitially(control(p2), soccer_s0).\ninitially(default_move(_, 'individual'), soccer_s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P,'individual'), S):- holds(player(P), S).\npossible(move(P,'collaborate'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('individual', 'collaborate').\nopposite_move('collaborate', 'individual').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1,M1,U1,P2,M2,U2), S):-\n    final(S),\n    holds(role(P1, offense), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, defense), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1,_,U1,_,_,_), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_,_,_,P2,_,U2), S).\n\n",
  "game_moves": [],
  "game_players": [],
  "default_move": null,
  "moves": [],
  "payoffs": [],
  "total_payoff": 0,
  "trace_messages": [],
  "attempts": 1
}