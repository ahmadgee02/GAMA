{
  "name": "Zufunu",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "  \n:- discontiguous payoff/4.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the Managers' Dilemma\npayoff('Independent', 'Independent', 1, 1).\npayoff('Collaborate', 'Independent', 0, 2).\npayoff('Independent', 'Collaborate', 2, 0).\npayoff('Collaborate', 'Collaborate', 3, 3).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(m1), s0).\ninitially(player(m2), s0).\ninitially(role(m1,manager1), s0).\ninitially(role(m2,manager2), s0).\ninitially(control(m1), s0).\ninitially(control(m2), s0).\ninitially(default_move(_, 'Independent'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_M2, _A2), do(move(_M1, _A1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(M, A), S):- possible(move(M, A), S), holds(control(M), S).\n\n% What is possible for a manager to choose\npossible(move(M,'Independent'), S):- holds(player(M), S).\npossible(move(M,'Collaborate'), S):- holds(player(M), S).\n\n% Moves that are opposite to each other.\nopposite_move('Collaborate', 'Independent').\nopposite_move('Independent', 'Collaborate').\n\n% The effects of a move: if M has chosen A, then in the next state this\n% is what they did.\neffect(did(M, A), move(M, A), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(M), move(M, _A), _S).\n\n% What holds finally: the outcome with managers, Moves, and Utilities.\nfinally(outcome(M1,A1,U1,M2,A2,U2), S):-\n    final(S),\n    holds(role(M1, manager1), S),\n    holds(did(M1, A1), S),\n    holds(role(M2, manager2), S),\n    holds(did(M2, A2), S),\n    payoff(A1, A2, U1, U2).\n\n% Goals achieved by the managers.\nfinally(goal(M1, U1), S):-\n    finally(outcome(M1,_,U1,_,_,_), S).\nfinally(goal(M2, U2), S):-\n    finally(outcome(_,_,_,M2,_,U2), S).\n",
  "game_moves": [
    "Collaborate",
    "Independent"
  ],
  "game_players": [
    "m1",
    "m2"
  ],
  "default_move": "Independent",
  "moves": [
    "Independent",
    "Independent",
    "Collaborate",
    "Collaborate"
  ],
  "payoffs": [
    1.0,
    2.0,
    3.0,
    0.0
  ],
  "total_payoff": 6.0,
  "trace_messages": [],
  "attempts": 1
}