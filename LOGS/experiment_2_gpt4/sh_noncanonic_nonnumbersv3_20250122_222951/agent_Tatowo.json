{
  "name": "Tatowo",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n\n/* Game specific predicates for Political Candidates Game */\n\n% Payoff matrix for the candidates game\n% Each tuple represents the payoff (Utility) for each candidate: \n% payoff(Candidate1Move, Candidate2Move, Utility1, Utility2)\npayoff('Self-Promote', 'Self-Promote', 1, 1).\npayoff('Collaborate', 'Self-Promote', 0, 3).\npayoff('Self-Promote', 'Collaborate', 3, 0).\npayoff('Collaborate', 'Collaborate', 5, 5).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(c1), s0).\ninitially(player(c2), s0).\ninitially(role(c1, candidate1), s0).\ninitially(role(c2, candidate2), s0).\ninitially(control(c1), s0).\ninitially(control(c2), s0).\ninitially(default_move(_, 'Collaborate'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_C2, _M2), do(move(_C1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (it's their turn).\nlegal(move(C, M), S):- possible(move(C, M), S), holds(control(C), S).\n\n% What is possible for a candidate to choose\npossible(move(C,'Self-Promote'), S):- holds(player(C), S).\npossible(move(C,'Collaborate'), S):- holds(player(C), S).\n\n% Moves that are opposite to each other.\nopposite_move('Collaborate', 'Self-Promote').\nopposite_move('Self-Promote', 'Collaborate').\n\n% The effects of a move: if C has chosen M, then in the next state this\n% is what they did.\neffect(did(C, M), move(C, M), _S).\n\n% The effects of a move: once a move is made, the candidate loses control, i.e.\n% cannot move anymore.\nabnormal(control(C), move(C, _M), _S).\n\n% What holds finally: the outcome with candidates, Moves, and Utilities.\nfinally(outcome(C1, M1, U1, C2, M2, U2), S):-\n    final(S),\n    holds(role(C1, candidate1), S),\n    holds(did(C1, M1), S),\n    holds(role(C2, candidate2), S),\n    holds(did(C2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the candidates.\nfinally(goal(C1, U1), S):-\n    finally(outcome(C1, _, U1, _, _, _), S).\nfinally(goal(C2, U2), S):-\n    finally(outcome(_, _, _, C2, _, U2), S).\n",
  "game_moves": [
    "Self-Promote",
    "Collaborate"
  ],
  "game_players": [
    "c1",
    "c2"
  ],
  "default_move": "Collaborate",
  "moves": [
    "Collaborate",
    "Collaborate",
    "Self-Promote",
    "Self-Promote"
  ],
  "payoffs": [
    5.0,
    0.0,
    1.0,
    3.0
  ],
  "total_payoff": 9.0,
  "trace_messages": [],
  "attempts": 1
}