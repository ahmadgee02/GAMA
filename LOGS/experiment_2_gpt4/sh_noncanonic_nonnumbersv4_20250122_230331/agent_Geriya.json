{
  "name": "Geriya",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous player/2, role/2, control/2, payoff/4, possible/2, opposite_move/2, did/3, final/1, effect/3, abnormal/3, finally/2.\n\n/* Game specific predicates for the Scientists' Dilemma */\n\n% Payoff matrix for the Scientists' Dilemma\n% 'Collaborate' and 'Individual' payoffs are represented numerically for simplicity\npayoff('Collaborate', 'Collaborate', 5, 5).\npayoff('Collaborate', 'Individual', 0, 3).\npayoff('Individual', 'Collaborate', 3, 0).\npayoff('Individual', 'Individual', 2, 2).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(s1), s0).\ninitially(player(s2), s0).\ninitially(role(s1,scientist1), s0).\ninitially(role(s2,scientist2), s0).\ninitially(control(s1), s0).\ninitially(control(s2), s0).\ninitially(default_move(_, 'Collaborate'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_S2, _M2), do(move(_S1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Collaborate'), S):- holds(player(P), S).\npossible(move(P, 'Individual'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Collaborate', 'Individual').\nopposite_move('Individual', 'Collaborate').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(S1, M1, U1, S2, M2, U2), S):-\n    final(S),\n    holds(role(S1, scientist1), S),\n    holds(did(S1, M1), S),\n    holds(role(S2, scientist2), S),\n    holds(did(S2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(S1, U1), S):-\n    finally(outcome(S1, _, U1, _, _, _), S).\nfinally(goal(S2, U2), S):-\n    finally(outcome(_, _, _, S2, _, U2), S).\n",
  "game_moves": [
    "Individual",
    "Collaborate"
  ],
  "game_players": [
    "s1",
    "s2"
  ],
  "default_move": "Collaborate",
  "moves": [
    "Collaborate",
    "Collaborate",
    "Individual",
    "Individual"
  ],
  "payoffs": [
    5.0,
    0.0,
    2.0,
    3.0
  ],
  "total_payoff": 10.0,
  "trace_messages": [],
  "attempts": 1
}