{
  "name": "Jigavo",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous initial_/2.\n:- discontiguous finally/2.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous payoff/4.\n\n/* Game specific predicates for the Allied Generals game */\n\n% Payoff matrix for the Allied Generals game\npayoff('Joint', 'Joint', 5, 5).\npayoff('Joint', 'Independent', 0, 3).\npayoff('Independent', 'Joint', 3, 0).\npayoff('Independent', 'Independent', 2, 2).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(general1), s0).\ninitially(player(general2), s0).\ninitially(role(general1, row), s0).\ninitially(role(general2, col), s0).\ninitially(control(general1), s0).\ninitially(control(general2), s0).\ninitially(default_move(_, 'Independent'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_G2, _M2), do(move(_G1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(G, M), S) :- possible(move(G, M), S), holds(control(G), S).\n\n% What is possible for a player to choose\npossible(move(G, 'Joint'), S) :- holds(player(G), S).\npossible(move(G, 'Independent'), S) :- holds(player(G), S).\n\n% Moves that are opposite to each other.\nopposite_move('Joint', 'Independent').\nopposite_move('Independent', 'Joint').\n\n% The effects of a move: if G has chosen M, then in the next state this\n% is what they did.\neffect(did(G, M), move(G, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(G), move(G, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(G1, M1, U1, G2, M2, U2), S) :-\n    final(S),\n    holds(role(G1, row), S),\n    holds(did(G1, M1), S),\n    holds(role(G2, col), S),\n    holds(did(G2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(G1, U1), S) :- \n    finally(outcome(G1, _M1, U1, _G2, _M2, _U2), S).\nfinally(goal(G2, U2), S) :- \n    finally(outcome(_G1, _M1, _U1, G2, _M2, U2), S).\n\n",
  "game_moves": [
    "Independent",
    "Joint"
  ],
  "game_players": [
    "general1",
    "general2"
  ],
  "default_move": "Independent",
  "moves": [
    "Independent",
    "Independent",
    "Joint",
    "Joint"
  ],
  "payoffs": [
    2.0,
    3.0,
    5.0,
    0.0
  ],
  "total_payoff": 10.0,
  "trace_messages": [],
  "attempts": 1
}