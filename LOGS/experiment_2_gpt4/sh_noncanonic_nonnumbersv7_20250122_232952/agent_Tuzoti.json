{
  "name": "Tuzoti",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n\n% Declare discontiguous predicates to allow scattered clauses.\n:- discontiguous player/3.\n:- discontiguous role/3.\n:- discontiguous control/3.\n:- discontiguous default_move/3.\n:- discontiguous initial/1.\n:- discontiguous possible/3.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the startup merger game\n% Collaborate (C), Go Alone (G)\npayoff('C', 'C', 8, 8).  % Both collaborate\npayoff('C', 'G', 0, 6).  % First collaborates, second goes alone\npayoff('G', 'C', 6, 0).  % First goes alone, second collaborates\npayoff('G', 'G', 2, 2).  % Both go alone\n\n% Initial state\ninitial(s0).\n\n% What holds initially: two players and their roles\ninitially(player(up1), s0).\ninitially(player(up2), s0).\ninitially(role(up1,row), s0).\ninitially(role(up2,col), s0).\ninitially(control(up1), s0).\ninitially(control(up2), s0).\ninitially(default_move(_, 'G'), s0).\n\n% When a state is final\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'C'), S) :- holds(player(P), S).\npossible(move(P, 'G'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('C', 'G').\nopposite_move('G', 'C').\n\n% The effects of a move: if P has chosen M, then in the next state this is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e. cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, row), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, col), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S) :-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S) :-\n    finally(outcome(_, _, _, P2, _, U2), S).\n\n",
  "game_moves": [
    "C",
    "G"
  ],
  "game_players": [
    "up1",
    "up2"
  ],
  "default_move": "G",
  "moves": [
    "G",
    "G",
    "C",
    "C"
  ],
  "payoffs": [
    2.0,
    6.0,
    8.0,
    0.0
  ],
  "total_payoff": 16.0,
  "trace_messages": [],
  "attempts": 1
}