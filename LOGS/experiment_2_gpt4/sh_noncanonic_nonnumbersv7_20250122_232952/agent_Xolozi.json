{
  "name": "Xolozi",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous payoff/6.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for the Startup Collaboration Game\n\n% Payoff matrix for the startup collaboration game\n% Format: payoff(Move1, Move2, Payoff1, Payoff2).\npayoff('collaborate', 'collaborate', 5, 5).\npayoff('collaborate', 'independent', 0, 3).\npayoff('independent', 'collaborate', 3, 0).\npayoff('independent', 'independent', 1, 1).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, whether they can play, and default move.\ninitially(player(startup1), s0).\ninitially(player(startup2), s0).\ninitially(role(startup1, primary), s0).\ninitially(role(startup2, secondary), s0).\ninitially(control(startup1), s0).\ninitially(control(startup2), s0).\ninitially(default_move(_, 'independent'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_S2, _M2), do(move(_S1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(S, M), S0):- possible(move(S, M), S0), holds(control(S), S0).\n\n% What is possible for a player to choose\npossible(move(S, 'collaborate'), S0):- holds(player(S), S0).\npossible(move(S, 'independent'), S0):- holds(player(S), S0).\n\n% Moves that are opposite to each other.\nopposite_move('collaborate', 'independent').\nopposite_move('independent', 'collaborate').\n\n% The effects of a move: if S has chosen M, then in the next state this\n% is what they did.\neffect(did(S, M), move(S, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(S), move(S, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(S1, M1, U1, S2, M2, U2), S):-\n    final(S),\n    holds(role(S1, primary), S),\n    holds(did(S1, M1), S),\n    holds(role(S2, secondary), S),\n    holds(did(S2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(S1, U1), S):-\n    finally(outcome(S1, _, U1, _, _, _), S).\nfinally(goal(S2, U2), S):-\n    finally(outcome(_, _, _, S2, _, U2), S).\n",
  "game_moves": [
    "collaborate",
    "independent"
  ],
  "game_players": [
    "startup1",
    "startup2"
  ],
  "default_move": "independent",
  "moves": [
    "independent",
    "independent",
    "collaborate",
    "collaborate"
  ],
  "payoffs": [
    1.0,
    3.0,
    5.0,
    0.0
  ],
  "total_payoff": 9.0,
  "trace_messages": [],
  "attempts": 1
}