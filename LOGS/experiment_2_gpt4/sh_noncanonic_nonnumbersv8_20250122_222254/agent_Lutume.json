{
  "name": "Lutume",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "  \n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous payoff/4.\n\n% Payoff matrix for Film Directors Game\npayoff('joint_project', 'joint_project', 5, 5).\npayoff('independent_movie', 'joint_project', 3, 0).\npayoff('joint_project', 'independent_movie', 0, 3).\npayoff('independent_movie', 'independent_movie', 2, 2).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(director1), s0).\ninitially(player(director2), s0).\ninitially(role(director1, 'director1_role'), s0).\ninitially(role(director2, 'director2_role'), s0).\ninitially(control(director1), s0).\ninitially(control(director2), s0).\ninitially(default_move(_, 'independent_movie'), s0).\n\n% When a state is final: no need to check content as generated by game/2, implying it is a legal state.\nfinal(do(move(_D2, _M2), do(move(_D1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(D, M), S):- possible(move(D, M), S), holds(control(D), S).\n\n% What is possible for a player to choose\npossible(move(D, 'joint_project'), S):- holds(player(D), S).\npossible(move(D, 'independent_movie'), S):- holds(player(D), S).\n\n% Moves that are opposite to each other.\nopposite_move('joint_project', 'independent_movie').\nopposite_move('independent_movie', 'joint_project').\n\n% The effects of a move: if D has chosen M, then in the next state this is what they did.\neffect(did(D, M), move(D, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e., cannot move anymore.\nabnormal(control(D), move(D, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(D1, M1, U1, D2, M2, U2), S):-\n    final(S),\n    holds(role(D1, 'director1_role'), S),\n    holds(did(D1, M1), S),\n    holds(role(D2, 'director2_role'), S),\n    holds(did(D2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(D1, U1), S):-\n    finally(outcome(D1, _, U1, _, _, _), S).\nfinally(goal(D2, U2), S):-\n    finally(outcome(_, _, _, D2, _, U2), S).\n",
  "game_moves": [
    "independent_movie",
    "joint_project"
  ],
  "game_players": [
    "director1",
    "director2"
  ],
  "default_move": "independent_movie",
  "moves": [
    "independent_movie",
    "independent_movie",
    "joint_project",
    "joint_project"
  ],
  "payoffs": [
    2.0,
    3.0,
    5.0,
    0.0
  ],
  "total_payoff": 10.0,
  "trace_messages": [],
  "attempts": 1
}