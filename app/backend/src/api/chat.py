from fastapi import APIRouter, WebSocket, WebSocketDisconnect

from ..models.prompt import PromptModel
from ..schemas.chat import NewChat
from ..database import prompt_collection
from ..logger import logging
from ..session_store import session_manager
from typing import Annotated
import json
from bson import ObjectId
from ..config import settings
from ..utils.jwt_handler import decode_access_token

from magif.agent.agent import Agent
from magif.utils.utils import AgentStatus, Mode, read_file, normalize_path, generate_agent_name
from magif.utils.data_object import DataObject
import os

router = APIRouter(prefix="/chats", tags=["chats"])
logger = logging.getLogger(__name__)

@router.post(
    "/",
    response_description="Create a new Chat",
    # response_model=list[PromptModel]
)
def create_sample_chat(chat: NewChat):
    # prompt = prompt_collection.find_one({"_id": chat.prompt_id })
    # if not prompt:
    #     raise HTTPException(status_code=404, detail="Prompt not found")
    
    session_id = "12345"

    agent_json = normalize_path("tutorial/DATA/AGENT/agent_Sonina.json")
    logger.info(f"agent_json => { agent_json }")
    agent = Agent(agent_json=agent_json, autoformalization_on=False)

    # session_manager.set_session(session_id, agent)
    # logger.info(f"agent_json 2 => { agent }")

    return session_id

@router.post(
    "/",
    response_description="Create a new Chat",
    # response_model=list[PromptModel]
)
def get_sample_chat():
    # prompt = prompt_collection.find_one({"_id": chat.prompt_id })
    # if not prompt:
    #     raise HTTPException(status_code=404, detail="Prompt not found")
    
    session_id = "12345"

    agent = session_manager.get_session(session_id)
    
    agent.describe()

    return session_id



@router.websocket("/ws")
async def websocket_endpoint(
    websocket: WebSocket
):
    await websocket.accept()
    session_manager.create_session(websocket)

    os.environ["OPENAI_API_KEY"] = settings.OPENAI_API_KEY

    try:
        while True:
            message = await websocket.receive_text()
            data = json.loads(message)

            action: str = data.get("action")
            payload: str = data.get("payload")

            logger.info(f"Received action: {action}, payload: {payload}")

            if action == "AUTH_TOKEN":
                user = decode_access_token(payload)

                if not user:
                    await websocket.send_text("Invalid token.")
                    return
                
                session_manager.set_session(websocket, "user", user)
                message = {
                    "type": "info",
                    "data": f"Authenticated as {user['name']}"
                }

                await websocket.send_text(json.dumps(message))

            elif action == "PROMPT":
                prompt_id: str = payload
                prompt = prompt_collection.find_one({ "_id": ObjectId(prompt_id) })

                if not prompt:
                    await websocket.send_text(f"Prompt not found: { prompt_id }")
                    return
                
                session_manager.set_session(websocket, "prompt", prompt["description"])
                message = {
                    "type": "info",
                    "data": f"Prompt set: { prompt["name"] }"
                }

                await websocket.send_text(json.dumps(message))
                # "6871d304894618c4ce7d5259"

            elif action == "DESCRIPTION":
                saved_info = session_manager.get_session(websocket)
                logger.info(f"saved_info I am working ===> { saved_info }")
                game_description: str = payload
                prompt_description: str = '% Situation Calculus - our formulation for games.\nholds(F, S):- initially(F, S).\nholds(F, do(M, S)):- effect(F, M, S).\nholds(F, do(A, S)):- holds(F, S), \\+ abnormal(F, A, S).\n\nThe prisoner\\\'s dilemma game, can be specified as follows:\n\n/* Game specific predicates for Prisoner\'s Dilemma (PD) */\n\n% Payoff matrix for PD\npayoff(\'D\', \'D\', 2, 2).\npayoff(\'C\', \'D\', 1, 4).\npayoff(\'D\', \'C\', 4, 1).\npayoff(\'C\', \'C\', 3, 3).\n% Initial state\ninitial(s0).\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(p1), s0).\ninitially(player(p2), s0).\ninitially(role(p1,row), s0).\ninitially(role(p2,col), s0).\ninitially(control(p1), s0).\ninitially(control(p2), s0).\ninitially(default_move(_, \'C\'), s0).\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):-initial(S).\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n% What is possible for a player to choose\npossible(move(P,\'D\'), S):- holds(player(P), S).\npossible(move(P,\'C\'), S):- holds(player(P), S).\n% Moves that are opposite to each other.\nopposite_move(\'C\', \'D\').\nopposite_move(\'D\', \'C\').\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n% The effects of a move: once a move is made, the player looses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1,M1,U1,P2,M2,U2), S):-\n    final(S),\n    holds(role(P1, row), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, col), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n% Goals achieved by the players.\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1,_,U1,_,_,_), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_,_,_,P2,_,U2), S).\n\nThe verbal description of a tit-for-tat strategy is as follows:\n\n"The tit-for-tat strategy begins with a default move. Then, in each subsequent interaction, it mirrors the opponent\'s previous move.".\n\nIts Prolog representation for the game specified above can be defined as follows:\n\n% tit-for-tat strategy\nselect(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).'

                prompt_template_path = normalize_path("DATA/PROMPTS/game_prompt_template.txt")
                prompt_template = read_file(prompt_template_path)

                feedback_template_path = normalize_path("DATA/PROMPTS/feedback_prompt_template.txt")
                feedback_prompt = read_file(feedback_template_path)

                prompt = prompt_template.format(game_description=game_description, game_prompt=prompt_description)

                game_data = DataObject(nl_description=game_description, instruction_prompt=prompt,
							   feedback_prompt=feedback_prompt, mode=Mode.AUTOFORMALIZATION)
                
                tit_for_tat_path = normalize_path("DATA/STRATEGIES/tit-for-tat.pl")
                strategy_data = DataObject(rules_path=tit_for_tat_path, mode=Mode.RULES_PATH)

                # agent = Agent(game_data, strategy_data, max_attempts=5, websocket=websocket)
                # agent_json = normalize_path("tutorial/DATA/AGENT/agent_Sonina.json")
                # logger.info(f"agent_json => { agent_json }")
                # agent = Agent(agent_json=agent_json, autoformalization_on=False)

                # await agent.send_message()

                message = {
                    "type": "data",
                    "data": json.dumps({  
                        'name': 'Bapibe', 
                        'strategy_name': 'tit-for-tat', 
                        'strategy_rules': 'select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).', 
                        'status': 'correct', 
                        'game_rules': "\n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for Joint Project Game */\n\n% Payoff matrix for Joint Project\npayoff('Share', 'Share', 5, 5).  % Both share openly, great results\npayoff('Share', 'Withhold', 2, 6). % One shares, the other withholds, sharer feels exploited\npayoff('Withhold', 'Share', 6, 2). % One withholds, the other shares, withholder benefits more\npayoff('Withhold', 'Withhold', 3, 3). % Both withhold, project suffers\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(e1), s0).\ninitially(player(e2), s0).\ninitially(role(e1, row), s0).\ninitially(role(e2, col), s0).\ninitially(control(e1), s0).\ninitially(control(e2), s0).\ninitially(default_move(_, 'Share'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_E2, _M2), do(move(_E1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(E, M), S) :- possible(move(E, M), S), holds(control(E), S).\n\n% What is possible for an employee to choose\npossible(move(E, 'Share'), S) :- holds(player(E), S).\npossible(move(E, 'Withhold'), S) :- holds(player(E), S).\n\n% Moves that are opposite to each other.\nopposite_move('Share', 'Withhold').\nopposite_move('Withhold', 'Share').\n\n% The effects of a move: if E has chosen M, then in the next state this\n% is what they did.\neffect(did(E, M), move(E, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(E), move(E, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(E1, M1, U1, E2, M2, U2), S) :-\n    final(S),\n    holds(role(E1, row), S),\n    holds(did(E1, M1), S),\n    holds(role(E2, col), S),\n    holds(did(E2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(E1, U1), S) :-\n    finally(outcome(E1, _, U1, _, _, _), S).\nfinally(goal(E2, U2), S) :-\n    finally(outcome(_, _, _, E2, _, U2), S).\n", 
                        'game_moves': ['Withhold', 'Share'], 
                        'game_players': ['e1', 'e2'], 
                        'default_move': 'Share', 
                        # 'moves': [], 
                        # 'payoffs': [], 
                        # 'total_payoff': 0
                    })
                }
                
                await websocket.send_text(json.dumps(message))
                # session_manager.set_session(websocket, "agent", agent)

            # await websocket.send_text(f"Message text was: {data}")
    except WebSocketDisconnect:
        session_manager.remove_session(websocket)
        await websocket.close()

