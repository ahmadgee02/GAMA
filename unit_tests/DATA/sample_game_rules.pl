
:- discontiguous holds/2.
:- discontiguous possible/2.
:- discontiguous payoff/4.
:- discontiguous opposite_move/2.
:- discontiguous initially/2.
:- discontiguous role/2.
:- discontiguous control/2.
:- discontiguous final/1.
:- discontiguous legal/2.
:- discontiguous effect/3.
:- discontiguous abnormal/3.
:- discontiguous finally/2.

% Game-specific predicates for the Generals' Coordination game

% Payoff matrix for the Generals' Coordination game
payoff('NorthRidge', 'NorthRidge', 2, 1).
payoff('SouthValley', 'SouthValley', 1, 2).
payoff('NorthRidge', 'SouthValley', 0, 0).
payoff('SouthValley', 'NorthRidge', 0, 0).

% Initial state
initial(s0).

% What holds initially: who is a player, their role, and whether they can play.
initially(player(general1), s0).
initially(player(general2), s0).
initially(role(general1, northridge), s0).
initially(role(general2, southvalley), s0).
initially(control(general1), s0).
initially(control(general2), s0).
initially(default_move(_, 'NorthRidge'), s0).

% When a state is final: no need to check content as it generated by game/2,
% implying it is a legal state.
final(do(move(_G2, _M2), do(move(_G1, _M1), S))) :- initial(S).

% A legal move is a possible move where the player has control (is its turn).
legal(move(G, M), S) :- possible(move(G, M), S), holds(control(G), S).

% What is possible for a player to choose
possible(move(G, 'NorthRidge'), S) :- holds(player(G), S).
possible(move(G, 'SouthValley'), S) :- holds(player(G), S).

% Moves that are opposite to each other.
opposite_move('NorthRidge', 'SouthValley').
opposite_move('SouthValley', 'NorthRidge').

% The effects of a move: if G has chosen M, then in the next state this is what they did.
effect(did(G, M), move(G, M), _S).

% The effects of a move: once a move is made, the player loses control, i.e.
% cannot move anymore.
abnormal(control(G), move(G, _M), _S).

% What holds finally: the outcome with players, Moves, and Utilities.
finally(outcome(G1, M1, U1, G2, M2, U2), S) :-
    final(S),
    holds(role(G1, northridge), S),
    holds(did(G1, M1), S),
    holds(role(G2, southvalley), S),
    holds(did(G2, M2), S),
    payoff(M1, M2, U1, U2).

% Goals achieved by the players.
finally(goal(G1, U1), S) :-
    finally(outcome(G1, _, U1, _, _, _), S).
finally(goal(G2, U2), S) :-
    finally(outcome(_, _, _, G2, _, U2), S).
