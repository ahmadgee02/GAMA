{
  "name": "Jekuti",
  "strategy_name": "tit-for-tat.",
  "strategy_rules": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "status": "correct",
  "game_rules": "\n:- discontiguous payoff/4.\n\n% Game specific predicates for the new game \n\n% Payoff matrix with actual payoffs for your game.\npayoff('Move1', 'Move1', 0, 0). % Example values, replace with actual utilities\npayoff('Move1', 'Move2', 1, -1). % Example values, replace with actual utilities\npayoff('Move2', 'Move1', -1, 1). % Example values, replace with actual utilities\npayoff('Move2', 'Move2', 2, 2). % Example values, replace with actual utilities\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(player1), s0).\ninitially(player(player2), s0).\ninitially(role(player1, role1), s0).\ninitially(role(player2, role2), s0).\ninitially(control(player1), s0).\ninitially(control(player2), s0).\ninitially(default_move(_, 'Move1'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(Player, Move), State):- possible(move(Player, Move), State), holds(control(Player), State).\n\n% What is possible for a player to choose\npossible(move(Player, 'Move1'), State):- holds(player(Player), State).\npossible(move(Player, 'Move2'), State):- holds(player(Player), State).\n\n% Moves that are opposite to each other.\nopposite_move('Move1', 'Move2').\nopposite_move('Move2', 'Move1').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(Player, Move), move(Player, Move), _State).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(Player), move(Player, _Move), _State).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), State):-\n    final(State),\n    holds(role(P1, role1), State),\n    holds(did(P1, M1), State),\n    holds(role(P2, role2), State),\n    holds(did(P2, M2), State),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), State):-\n    finally(outcome(P1, _, U1, _, _, _), State).\nfinally(goal(P2, U2), State):-\n    finally(outcome(_, _, _, P2, _, U2), State).\n",
  "game_moves": [
    "Move1",
    "Move2"
  ],
  "game_players": [
    "player1",
    "player2"
  ],
  "default_move": "Move1",
  "moves": [],
  "payoffs": [],
  "total_payoff": 0,
  "trace_messages": [
    "Line: payoff('Move1', 'Move1', UtilityP1, UtilityP2). produced Warning: Singleton variables: [UtilityP1,UtilityP2]\nLine: payoff('Move1', 'Move2', UtilityP1, UtilityP2). produced Warning: Singleton variables: [UtilityP1,UtilityP2]\nLine: payoff('Move2', 'Move1', UtilityP1, UtilityP2). produced Warning: Singleton variables: [UtilityP1,UtilityP2]\nLine: payoff('Move2', 'Move2', UtilityP1, UtilityP2). produced Warning: Singleton variables: [UtilityP1,UtilityP2]\n"
  ],
  "attempts": 2
}